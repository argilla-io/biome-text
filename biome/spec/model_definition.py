# coding: utf-8

"""
    RecognAI API

    Recognai Platform API specification  # noqa: E501

    OpenAPI spec version: v0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from biome.spec.model_definition_topology import ModelDefinitionTopology  # noqa: F401,E501


class ModelDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input': 'dict(str, object)',
        'annotation': 'dict(str, object)',
        'topology': 'ModelDefinitionTopology'
    }

    attribute_map = {
        'input': 'input',
        'annotation': 'annotation',
        'topology': 'topology'
    }

    def __init__(self, input=None, annotation=None, topology=None):  # noqa: E501
        """ModelDefinition - a model defined in Swagger"""  # noqa: E501

        self._input = None
        self._annotation = None
        self._topology = None
        self.discriminator = None

        if input is not None:
            self.input = input
        if annotation is not None:
            self.annotation = annotation
        if topology is not None:
            self.topology = topology

    @property
    def input(self):
        """Gets the input of this ModelDefinition.  # noqa: E501

        The input schema definition  # noqa: E501

        :return: The input of this ModelDefinition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ModelDefinition.

        The input schema definition  # noqa: E501

        :param input: The input of this ModelDefinition.  # noqa: E501
        :type: dict(str, object)
        """

        self._input = input

    @property
    def annotation(self):
        """Gets the annotation of this ModelDefinition.  # noqa: E501

        The output annotation schema definition  # noqa: E501

        :return: The annotation of this ModelDefinition.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this ModelDefinition.

        The output annotation schema definition  # noqa: E501

        :param annotation: The annotation of this ModelDefinition.  # noqa: E501
        :type: dict(str, object)
        """

        self._annotation = annotation

    @property
    def topology(self):
        """Gets the topology of this ModelDefinition.  # noqa: E501


        :return: The topology of this ModelDefinition.  # noqa: E501
        :rtype: ModelDefinitionTopology
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this ModelDefinition.


        :param topology: The topology of this ModelDefinition.  # noqa: E501
        :type: ModelDefinitionTopology
        """

        self._topology = topology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
