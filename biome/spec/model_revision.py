# coding: utf-8

"""
    RecognAI API

    Recognai Platform API specification  # noqa: E501

    OpenAPI spec version: v0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from biome.spec.metadata import Metadata  # noqa: F401,E501
from biome.spec.model_definition import ModelDefinition  # noqa: F401,E501


class ModelRevision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'version': 'str',
        'engine': 'str',
        'definition': 'ModelDefinition',
        'state': 'str',
        'error_message': 'str',
        'metadata': 'Metadata'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'engine': 'engine',
        'definition': 'definition',
        'state': 'state',
        'error_message': 'errorMessage',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, name=None, description=None, version=None, engine=None, definition=None, state=None, error_message=None, metadata=None):  # noqa: E501
        """ModelRevision - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._version = None
        self._engine = None
        self._definition = None
        self._state = None
        self._error_message = None
        self._metadata = None
        self.discriminator = None

        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if engine is not None:
            self.engine = engine
        self.definition = definition
        if state is not None:
            self.state = state
        if error_message is not None:
            self.error_message = error_message
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this ModelRevision.  # noqa: E501


        :return: The id of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelRevision.


        :param id: The id of this ModelRevision.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelRevision.  # noqa: E501

        The name specified for the revision when it was created. The revision name must be unique within the model it is created in.   # noqa: E501

        :return: The name of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelRevision.

        The name specified for the revision when it was created. The revision name must be unique within the model it is created in.   # noqa: E501

        :param name: The name of this ModelRevision.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ModelRevision.  # noqa: E501

        The description specified for the revision when it was created  # noqa: E501

        :return: The description of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelRevision.

        The description specified for the revision when it was created  # noqa: E501

        :param description: The description of this ModelRevision.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this ModelRevision.  # noqa: E501

        the model version linked to revision  # noqa: E501

        :return: The version of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelRevision.

        the model version linked to revision  # noqa: E501

        :param version: The version of this ModelRevision.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def engine(self):
        """Gets the engine of this ModelRevision.  # noqa: E501

        The model revision engine used to deploy this revision. Model engines are managed by /model-engines endpoint   # noqa: E501

        :return: The engine of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this ModelRevision.

        The model revision engine used to deploy this revision. Model engines are managed by /model-engines endpoint   # noqa: E501

        :param engine: The engine of this ModelRevision.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def definition(self):
        """Gets the definition of this ModelRevision.  # noqa: E501


        :return: The definition of this ModelRevision.  # noqa: E501
        :rtype: ModelDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ModelRevision.


        :param definition: The definition of this ModelRevision.  # noqa: E501
        :type: ModelDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def state(self):
        """Gets the state of this ModelRevision.  # noqa: E501

        Output only. The model revision state: * UNKNOWN  The revision state is unspecified. * READY  The revision is ready for prediction. * CREATING  The revision is being created. New revisions.patch and revisions.delete requests will fail if a revision is in the CREATING state. * FAILED  The revision failed to be created, possibly cancelled. errorMessage should contain the details of the failure. * DELETING  The revision is being deleted. New revisions.patch and revisions.delete requests will fail if a revision is in the DELETING state. * UPDATING  The revision is being updated. New revisions.patch and revisions.delete requests will fail if a revision is in the UPDATING state.   # noqa: E501

        :return: The state of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ModelRevision.

        Output only. The model revision state: * UNKNOWN  The revision state is unspecified. * READY  The revision is ready for prediction. * CREATING  The revision is being created. New revisions.patch and revisions.delete requests will fail if a revision is in the CREATING state. * FAILED  The revision failed to be created, possibly cancelled. errorMessage should contain the details of the failure. * DELETING  The revision is being deleted. New revisions.patch and revisions.delete requests will fail if a revision is in the DELETING state. * UPDATING  The revision is being updated. New revisions.patch and revisions.delete requests will fail if a revision is in the UPDATING state.   # noqa: E501

        :param state: The state of this ModelRevision.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "READY", "CREATING", "FAILED", "DELETING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def error_message(self):
        """Gets the error_message of this ModelRevision.  # noqa: E501

        Output only. The details of a failure or a cancellation  # noqa: E501

        :return: The error_message of this ModelRevision.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ModelRevision.

        Output only. The details of a failure or a cancellation  # noqa: E501

        :param error_message: The error_message of this ModelRevision.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def metadata(self):
        """Gets the metadata of this ModelRevision.  # noqa: E501


        :return: The metadata of this ModelRevision.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ModelRevision.


        :param metadata: The metadata of this ModelRevision.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelRevision):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
