# coding: utf-8

"""
    RecognAI API

    Recognai Platform API specification  # noqa: E501

    OpenAPI spec version: v0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'namespace': 'str',
        'owner': 'str',
        'type': 'str',
        'resource_version': 'str',
        'created_by': 'str',
        'created_at': 'datetime',
        'last_update_at': 'datetime',
        'labels': 'dict(str, object)'
    }

    attribute_map = {
        'namespace': 'namespace',
        'owner': 'owner',
        'type': 'type',
        'resource_version': 'resourceVersion',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'last_update_at': 'lastUpdateAt',
        'labels': 'labels'
    }

    def __init__(self, namespace=None, owner=None, type=None, resource_version=None, created_by=None, created_at=None, last_update_at=None, labels=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501

        self._namespace = None
        self._owner = None
        self._type = None
        self._resource_version = None
        self._created_by = None
        self._created_at = None
        self._last_update_at = None
        self._labels = None
        self.discriminator = None

        if namespace is not None:
            self.namespace = namespace
        if owner is not None:
            self.owner = owner
        if type is not None:
            self.type = type
        if resource_version is not None:
            self.resource_version = resource_version
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if last_update_at is not None:
            self.last_update_at = last_update_at
        if labels is not None:
            self.labels = labels

    @property
    def namespace(self):
        """Gets the namespace of this Metadata.  # noqa: E501

        Output only. The namespace where resource belongs  # noqa: E501

        :return: The namespace of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Metadata.

        Output only. The namespace where resource belongs  # noqa: E501

        :param namespace: The namespace of this Metadata.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def owner(self):
        """Gets the owner of this Metadata.  # noqa: E501

        Output only. The resource's owner  # noqa: E501

        :return: The owner of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Metadata.

        Output only. The resource's owner  # noqa: E501

        :param owner: The owner of this Metadata.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this Metadata.  # noqa: E501

        The resource' type  # noqa: E501

        :return: The type of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Metadata.

        The resource' type  # noqa: E501

        :param type: The type of this Metadata.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def resource_version(self):
        """Gets the resource_version of this Metadata.  # noqa: E501

        The resource's version  # noqa: E501

        :return: The resource_version of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this Metadata.

        The resource's version  # noqa: E501

        :param resource_version: The resource_version of this Metadata.  # noqa: E501
        :type: str
        """

        self._resource_version = resource_version

    @property
    def created_by(self):
        """Gets the created_by of this Metadata.  # noqa: E501

        User creating resource (maybe diferent to owner)  # noqa: E501

        :return: The created_by of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Metadata.

        User creating resource (maybe diferent to owner)  # noqa: E501

        :param created_by: The created_by of this Metadata.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this Metadata.  # noqa: E501

        Output only. Creation time (RFC3339 format)  # noqa: E501

        :return: The created_at of this Metadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Metadata.

        Output only. Creation time (RFC3339 format)  # noqa: E501

        :param created_at: The created_at of this Metadata.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_update_at(self):
        """Gets the last_update_at of this Metadata.  # noqa: E501

        Timestamp for last change made  # noqa: E501

        :return: The last_update_at of this Metadata.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_at

    @last_update_at.setter
    def last_update_at(self, last_update_at):
        """Sets the last_update_at of this Metadata.

        Timestamp for last change made  # noqa: E501

        :param last_update_at: The last_update_at of this Metadata.  # noqa: E501
        :type: datetime
        """

        self._last_update_at = last_update_at

    @property
    def labels(self):
        """Gets the labels of this Metadata.  # noqa: E501

        map key with custom/extra information  # noqa: E501

        :return: The labels of this Metadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Metadata.

        map key with custom/extra information  # noqa: E501

        :param labels: The labels of this Metadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
