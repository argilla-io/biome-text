# coding: utf-8

"""
    RecognAI API

    Recognai Platform API specification  # noqa: E501

    OpenAPI spec version: v0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataSourceRole(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'train_split': 'int',
        'validation_split': 'int',
        'test_split': 'int'
    }

    attribute_map = {
        'train_split': 'trainSplit',
        'validation_split': 'validationSplit',
        'test_split': 'testSplit'
    }

    def __init__(self, train_split=None, validation_split=None, test_split=None):  # noqa: E501
        """DataSourceRole - a model defined in Swagger"""  # noqa: E501

        self._train_split = None
        self._validation_split = None
        self._test_split = None
        self.discriminator = None

        if train_split is not None:
            self.train_split = train_split
        if validation_split is not None:
            self.validation_split = validation_split
        if test_split is not None:
            self.test_split = test_split

    @property
    def train_split(self):
        """Gets the train_split of this DataSourceRole.  # noqa: E501

        The data percentage used for training  # noqa: E501

        :return: The train_split of this DataSourceRole.  # noqa: E501
        :rtype: int
        """
        return self._train_split

    @train_split.setter
    def train_split(self, train_split):
        """Sets the train_split of this DataSourceRole.

        The data percentage used for training  # noqa: E501

        :param train_split: The train_split of this DataSourceRole.  # noqa: E501
        :type: int
        """

        self._train_split = train_split

    @property
    def validation_split(self):
        """Gets the validation_split of this DataSourceRole.  # noqa: E501

        The data percentage used for validation  # noqa: E501

        :return: The validation_split of this DataSourceRole.  # noqa: E501
        :rtype: int
        """
        return self._validation_split

    @validation_split.setter
    def validation_split(self, validation_split):
        """Sets the validation_split of this DataSourceRole.

        The data percentage used for validation  # noqa: E501

        :param validation_split: The validation_split of this DataSourceRole.  # noqa: E501
        :type: int
        """

        self._validation_split = validation_split

    @property
    def test_split(self):
        """Gets the test_split of this DataSourceRole.  # noqa: E501

        The data percentage used for test  # noqa: E501

        :return: The test_split of this DataSourceRole.  # noqa: E501
        :rtype: int
        """
        return self._test_split

    @test_split.setter
    def test_split(self, test_split):
        """Sets the test_split of this DataSourceRole.

        The data percentage used for test  # noqa: E501

        :param test_split: The test_split of this DataSourceRole.  # noqa: E501
        :type: int
        """

        self._test_split = test_split

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSourceRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
