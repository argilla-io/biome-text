# coding: utf-8

"""
    RecognAI API

    Recognai Platform API specification  # noqa: E501

    OpenAPI spec version: v0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataSourceFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'lang': 'str',
        'charset': 'str',
        'params': 'dict(str, object)'
    }

    attribute_map = {
        'type': 'type',
        'lang': 'lang',
        'charset': 'charset',
        'params': 'params'
    }

    def __init__(self, type=None, lang=None, charset=None, params=None):  # noqa: E501
        """DataSourceFormat - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._lang = None
        self._charset = None
        self._params = None
        self.discriminator = None

        self.type = type
        if lang is not None:
            self.lang = lang
        if charset is not None:
            self.charset = charset
        self.params = params

    @property
    def type(self):
        """Gets the type of this DataSourceFormat.  # noqa: E501

        For file-based datasources, the name of the format (csv, json-l, raw,...)  # noqa: E501

        :return: The type of this DataSourceFormat.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSourceFormat.

        For file-based datasources, the name of the format (csv, json-l, raw,...)  # noqa: E501

        :param type: The type of this DataSourceFormat.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["csv", "json-l", "xml", "raw"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def lang(self):
        """Gets the lang of this DataSourceFormat.  # noqa: E501

        Language for datasource (detected for file-based data source if no provided)  # noqa: E501

        :return: The lang of this DataSourceFormat.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this DataSourceFormat.

        Language for datasource (detected for file-based data source if no provided)  # noqa: E501

        :param lang: The lang of this DataSourceFormat.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def charset(self):
        """Gets the charset of this DataSourceFormat.  # noqa: E501

        Charset encoding used for For file-based datasources (autamically detected if no provided)  # noqa: E501

        :return: The charset of this DataSourceFormat.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this DataSourceFormat.

        Charset encoding used for For file-based datasources (autamically detected if no provided)  # noqa: E501

        :param charset: The charset of this DataSourceFormat.  # noqa: E501
        :type: str
        """

        self._charset = charset

    @property
    def params(self):
        """Gets the params of this DataSourceFormat.  # noqa: E501

        For file-based datasources, the parameters of the format. The actual parameters depend on the format type  # noqa: E501

        :return: The params of this DataSourceFormat.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this DataSourceFormat.

        For file-based datasources, the parameters of the format. The actual parameters depend on the format type  # noqa: E501

        :param params: The params of this DataSourceFormat.  # noqa: E501
        :type: dict(str, object)
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSourceFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
