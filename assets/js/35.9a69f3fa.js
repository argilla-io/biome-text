(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{392:function(s,t,e){"use strict";e.r(t);var a=e(26),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"biome-text-modules-heads-defs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-defs"}},[s._v("#")]),s._v(" biome.text.modules.heads.defs "),e("Badge",{attrs:{text:"Module"}})],1),s._v(" "),e("dl",[e("h2",{attrs:{id:"biome.text.modules.heads.defs.TaskOutput"}},[s._v("TaskOutput "),e("Badge",{attrs:{text:"Class"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[s._v("    "),e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("TaskOutput")]),s._v(" ("),s._v("\n    "),e("span",[s._v("logits: torch.Tensor")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("probs: torch.Tensor")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("loss: Union[torch.Tensor, NoneType] = None")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("**extra_data")]),e("span",[s._v(",")]),s._v("\n"),e("span",[s._v(")")]),s._v("\n    ")])])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Task output data class")]),s._v(" "),e("p",[s._v("A task output will contains almost the logits and probs properties")])]),s._v(" "),e("dl",[e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskOutput.as_dict"}},[s._v("as_dict "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("as_dict")]),s._v("("),e("span",[s._v("self) -> Dict[str, torch.Tensor]")]),s._v("\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Dict reprentation of task output")])])])])]),s._v(" "),e("h2",{attrs:{id:"biome.text.modules.heads.defs.TaskName"}},[s._v("TaskName "),e("Badge",{attrs:{text:"Class"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[s._v("    "),e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("TaskName")]),s._v(" ("),s._v("\n    "),e("span",[s._v("value")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("names=None")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("*")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("module=None")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("qualname=None")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("type=None")]),e("span",[s._v(",")]),s._v("\n    "),e("span",[s._v("start=1")]),e("span",[s._v(",")]),s._v("\n"),e("span",[s._v(")")]),s._v("\n    ")])])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("The task name enum structure")])]),s._v(" "),e("h3",[s._v("Ancestors")]),s._v(" "),e("ul",{staticClass:"hlist"},[e("li",[s._v("enum.Enum")])]),s._v(" "),e("h3",[s._v("Class variables")]),s._v(" "),e("dl",[e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.none"}},[e("code",{staticClass:"name"},[s._v("var "),e("span",{staticClass:"ident"},[s._v("none")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"})]),s._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.text_classification"}},[e("code",{staticClass:"name"},[s._v("var "),e("span",{staticClass:"ident"},[s._v("text_classification")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"})]),s._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.token_classification"}},[e("code",{staticClass:"name"},[s._v("var "),e("span",{staticClass:"ident"},[s._v("token_classification")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"})]),s._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.language_modelling"}},[e("code",{staticClass:"name"},[s._v("var "),e("span",{staticClass:"ident"},[s._v("language_modelling")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"})])])]),s._v(" "),e("h2",{attrs:{id:"biome.text.modules.heads.defs.TaskHead"}},[s._v("TaskHead "),e("Badge",{attrs:{text:"Class"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[s._v("    "),e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("TaskHead")]),s._v(" (backbone: "),e("a",{attrs:{title:"biome.text.backbone.BackboneEncoder",href:"../../backbone.html#biome.text.backbone.BackboneEncoder"}},[s._v("BackboneEncoder")]),s._v(")"),s._v("\n    ")])])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Base task head class")]),s._v(" "),e("p",[s._v("Initializes internal Module state, shared by both nn.Module and ScriptModule.")])]),s._v(" "),e("h3",[s._v("Ancestors")]),s._v(" "),e("ul",{staticClass:"hlist"},[e("li",[s._v("torch.nn.modules.module.Module")]),s._v(" "),e("li",[s._v("allennlp.common.registrable.Registrable")]),s._v(" "),e("li",[s._v("allennlp.common.from_params.FromParams")])]),s._v(" "),e("h3",[s._v("Subclasses")]),s._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.classification.defs.ClassificationHead",href:"classification/defs.html#biome.text.modules.heads.classification.defs.ClassificationHead"}},[s._v("ClassificationHead")])]),s._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.language_modelling.LanguageModelling",href:"language_modelling.html#biome.text.modules.heads.language_modelling.LanguageModelling"}},[s._v("LanguageModelling")])]),s._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.token_classification.TokenClassification",href:"token_classification.html#biome.text.modules.heads.token_classification.TokenClassification"}},[s._v("TokenClassification")])])]),s._v(" "),e("dl",[e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.register"}},[s._v("register "),e("Badge",{attrs:{text:"Static method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("register")]),s._v(" ("),s._v("\n   overrides: bool = False,\n   **kwargs,\n) \n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Enables the task head component for pipeline loading")])])])]),s._v(" "),e("h3",[s._v("Instance variables")]),s._v(" "),e("dl",[e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.labels"}},[e("code",{staticClass:"name"},[s._v("var "),e("span",{staticClass:"ident"},[s._v("labels")]),s._v(" : List[str]")])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("The configured vocab labels")])])]),s._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.num_labels"}},[e("code",{staticClass:"name"},[s._v("var "),e("span",{staticClass:"ident"},[s._v("num_labels")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("The number of vocab labels")])])])]),s._v(" "),e("dl",[e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.extend_labels"}},[s._v("extend_labels "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("extend_labels")]),s._v(" ("),s._v("\n   self,\n   labels: List[str],\n) \n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Extends the number of labels")])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.task_name"}},[s._v("task_name "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("task_name")]),s._v("("),e("span",[s._v("self) -> "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskName",href:"#biome.text.modules.heads.defs.TaskName"}},[s._v("TaskName")])]),s._v("\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("The task head name")])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.inputs"}},[s._v("inputs "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("inputs")]),s._v("("),e("span",[s._v("self) -> Union[List[str], NoneType]")]),s._v("\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("The expected inputs names for data featuring. If no defined,\nwill be automatically calculated from featurize signature")])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.forward"}},[s._v("forward "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("forward")]),s._v(" ("),s._v("\n   self,\n   *args: Any,\n   **kwargs: Any,\n)  -> "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[s._v("TaskOutput")]),s._v("\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Defines the computation performed at every call.")]),s._v(" "),e("p",[s._v("Should be overridden by all subclasses.")]),s._v(" "),e("div",{staticClass:"admonition note"},[e("p",{staticClass:"admonition-title"},[s._v("Note")]),s._v(" "),e("p",[s._v("Although the recipe for forward pass needs to be defined within\nthis function, one should call the :class:"),e("code",[s._v("Module")]),s._v(" instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.")])])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.get_metrics"}},[s._v("get_metrics "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("get_metrics")]),s._v(" ("),s._v("\n   self,\n   reset: bool = False,\n)  -> Dict[str, float]\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Metrics dictionary for training task")])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.featurize"}},[s._v("featurize "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("featurize")]),s._v(" ("),s._v("\n   self,\n   *args,\n   **kwargs,\n)  -> Union[allennlp.data.instance.Instance, NoneType]\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Converts incoming data into an allennlp "),e("code",[s._v("Instance")]),s._v(", used for pyTorch tensors generation")])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.process_output"}},[s._v("process_output "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("process_output")]),s._v(" ("),s._v("\n   self,\n   output: "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[s._v("TaskOutput")]),s._v(",\n)  -> "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[s._v("TaskOutput")]),s._v("\n")]),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Build extra parameters over basic task output")])])]),s._v(" "),e("h3",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.prediction_explain"}},[s._v("prediction_explain "),e("Badge",{attrs:{text:"Method"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("def")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("prediction_explain")]),s._v(" ("),s._v("\n   self,\n   prediction: Dict[str, "),e("built-in",{attrs:{function:"",array:""}},[s._v("],\n   instance: allennlp.data.instance.Instance,\n)  -> Dict[str, Any]\n")])],1),s._v("\n        ")])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Adds embedding explanations information to prediction output")])])])])]),s._v(" "),e("h2",{attrs:{id:"biome.text.modules.heads.defs.TaskHeadSpec"}},[s._v("TaskHeadSpec "),e("Badge",{attrs:{text:"Class"}})],1),s._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[s._v("    "),e("code",[s._v("\n"),e("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),e("span",{staticClass:"ident"},[s._v("TaskHeadSpec")]),s._v(" (*args, **kwds)"),s._v("\n    ")])])])]),s._v(" "),e("dd",[e("div",{staticClass:"desc"},[e("p",[s._v("Layer spec for TaskHead components")])]),s._v(" "),e("h3",[s._v("Ancestors")]),s._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec"}},[s._v("ComponentSpec")])]),s._v(" "),e("li",[s._v("typing.Generic")]),s._v(" "),e("li",[s._v("allennlp.common.from_params.FromParams")])]),s._v(" "),e("h3",[s._v("Inherited members")]),s._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("code",[e("b",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec"}},[s._v("ComponentSpec")])])]),s._v(":\n"),e("ul",{staticClass:"hlist"},[e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.compile",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.compile"}},[s._v("compile")])])]),s._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.config",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.config"}},[s._v("config")])])]),s._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.from_params",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.from_params"}},[s._v("from_params")])])]),s._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.input_dim",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.input_dim"}},[s._v("input_dim")])])])])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);