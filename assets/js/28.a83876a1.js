(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{400:function(t,e,s){"use strict";s.r(e);var a=s(26),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"biome-text-helpers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-helpers"}},[t._v("#")]),t._v(" biome.text.helpers "),s("Badge",{attrs:{text:"Module"}})],1),t._v(" "),s("div"),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"yaml-to-dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yaml-to-dict"}},[t._v("#")]),t._v(" yaml_to_dict "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("yaml_to_dict")]),t._v("("),s("span",[t._v("filepath: str) -> Dict[str, Any]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Loads a yaml file into a data dictionary")])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"get-compatible-doc-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-compatible-doc-type"}},[t._v("#")]),t._v(" get_compatible_doc_type "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("get_compatible_doc_type")]),t._v("("),s("span",[t._v("client: elasticsearch.client.Elasticsearch) -> str")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Find a compatible name for doc type by checking the cluster info\nParameters")]),t._v(" "),s("hr"),t._v(" "),s("dl",[s("dt",[s("strong",[s("code",[t._v("client")])])]),t._v(" "),s("dd",[t._v("The elasticsearch client")])]),t._v(" "),s("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),s("pre",[s("code",[t._v("A compatible name for doc type in function of cluster version\n")])])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"get-env-cuda-device"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-env-cuda-device"}},[t._v("#")]),t._v(" get_env_cuda_device "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("get_env_cuda_device")]),t._v("("),s("span",[t._v(") -> int")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Gets the cuda device from an environment variable.")]),t._v(" "),s("p",[t._v("This is necessary to activate a GPU if available")]),t._v(" "),s("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),s("dl",[s("dt",[s("code",[t._v("cuda_device")])]),t._v(" "),s("dd",[t._v("The integer number of the CUDA device")])])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"update-method-signature"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-method-signature"}},[t._v("#")]),t._v(" update_method_signature "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("update_method_signature")]),t._v(" ("),t._v("\n  signature: inspect.Signature,\n  to_method,\n) \n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Updates signature to method")])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"isgeneric"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isgeneric"}},[t._v("#")]),t._v(" isgeneric "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("isgeneric")]),t._v("("),s("span",[t._v("class_type: Type) -> bool")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Checks if a class type is a generic type (List[str] or Union[str, int]")])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"is-running-on-notebook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-running-on-notebook"}},[t._v("#")]),t._v(" is_running_on_notebook "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("is_running_on_notebook")]),t._v("("),s("span",[t._v(") -> bool")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Checks if code is running inside a jupyter notebook")])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"split-signature-params-by-predicate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split-signature-params-by-predicate"}},[t._v("#")]),t._v(" split_signature_params_by_predicate "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("split_signature_params_by_predicate")]),t._v(" ("),t._v("\n  signature_function: Callable,\n  predicate: Callable,\n)  -> Tuple[List[inspect.Parameter], List[inspect.Parameter]]\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Splits parameters signature by defined boolean predicate function")])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"clean-metric-name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clean-metric-name"}},[t._v("#")]),t._v(" clean_metric_name "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("clean_metric_name")]),t._v("("),s("span",[t._v("name)")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd"),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"get-word-tokens-ids-from-text-field-tensors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-word-tokens-ids-from-text-field-tensors"}},[t._v("#")]),t._v(" get_word_tokens_ids_from_text_field_tensors "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("get_word_tokens_ids_from_text_field_tensors")]),t._v("("),s("span",[t._v("text_field_tensors: Dict[str, Dict[str, torch.Tensor]]) -> Union[torch.Tensor, NoneType]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Given a text field tensor structure, tries to extract word features related tensors")]),t._v(" "),s("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),s("dl",[s("dt",[s("strong",[s("code",[t._v("text_field_tensors")])]),t._v(" : "),s("code",[t._v("The incoming record text field tensors dictionary")])]),t._v(" "),s("dd",[t._v(" ")])]),t._v(" "),s("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),s("p",[s("code",[t._v("WordFeatures")]),t._v(" related tensors if enable")])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"get-char-tokens-ids-from-text-field-tensors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-char-tokens-ids-from-text-field-tensors"}},[t._v("#")]),t._v(" get_char_tokens_ids_from_text_field_tensors "),s("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("get_char_tokens_ids_from_text_field_tensors")]),t._v("("),s("span",[t._v("text_field_tensors: Dict[str, Dict[str, torch.Tensor]]) -> Union[torch.Tensor, NoneType]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Given a text field tensor structure, tries to extract character features related tensors")]),t._v(" "),s("p",[t._v("See "),s("code",[t._v("TokenCharactersIndexer.tokens_to_indices")]),t._v(" for more info")]),t._v(" "),s("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),s("dl",[s("dt",[s("strong",[s("code",[t._v("text_field_tensors")])]),t._v(" : "),s("code",[t._v("The incoming record text field tensors dictionary")])]),t._v(" "),s("dd",[t._v(" ")])]),t._v(" "),s("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),s("p",[s("code",[t._v("CharFeatures")]),t._v(" related tensors if enable")])])])}),[],!1,null,null,null);e.default=n.exports}}]);