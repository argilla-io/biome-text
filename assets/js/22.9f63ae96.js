(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{404:function(t,a,e){"use strict";e.r(a);var s=e(26),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"biome-text-data-helpers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-data-helpers"}},[t._v("#")]),t._v(" biome.text.data.helpers "),e("Badge",{attrs:{text:"Module"}})],1),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"get-nested-property-from-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-nested-property-from-data"}},[t._v("#")]),t._v(" get_nested_property_from_data "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("get_nested_property_from_data")]),t._v(" ("),t._v("\n            data: Dict,\n            property_key: str,\n          )  -> Union[Any, NoneType]\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Search an deep property key in a data dictionary.")]),t._v(" "),e("p",[t._v('For example, having the data dictionary {"a": {"b": "the value"}}, the call')]),t._v(" "),e("blockquote",[e("blockquote",[e("p",[t._v('self.get_nested_property_from_data( {"a": {"b": "the value"}}, "a.b")')])])]),t._v(" "),e("p",[t._v("is equivalent to:")]),t._v(" "),e("blockquote",[e("blockquote",[e("p",[t._v('data["a"]["b"]')])])]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("data")])])]),t._v(" "),e("dd",[t._v("The data dictionary")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("property_key")])])]),t._v(" "),e("dd",[t._v("The (deep) property key")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("pre",[e("code",[t._v("The property value if found, None otherwise\n")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"configure-dask-cluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configure-dask-cluster"}},[t._v("#")]),t._v(" configure_dask_cluster "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("configure_dask_cluster")]),t._v(" ("),t._v("\n            address: str = 'local',\n            n_workers: int = 1,\n            worker_memory: Union[str, int] = '1GB',\n          )  -> Union[distributed.client.Client, NoneType]\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Creates a dask client (with a LocalCluster if needed)")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("address")])])]),t._v(" "),e("dd",[t._v('The cluster address. If "local" try to connect to a local cluster listening the 8786 port.\nIf no cluster listening, creates a new LocalCluster')]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("n_workers")])])]),t._v(" "),e("dd",[t._v('The number of cluster workers (only a new "local" cluster generation)')]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("worker_memory")])])]),t._v(" "),e("dd",[t._v("The memory reserved for local workers")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("A new dask Client")])]),t._v(" "),e("dd",[t._v(" ")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"close-dask-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#close-dask-client"}},[t._v("#")]),t._v(" close_dask_client "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("close_dask_client")]),t._v("("),e("span",[t._v(")")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd"),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"extension-from-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extension-from-path"}},[t._v("#")]),t._v(" extension_from_path "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("extension_from_path")]),t._v("("),e("span",[t._v("path: Union[str, List[str]]) -> str")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Helper method to get file extension")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("path")])])]),t._v(" "),e("dd",[t._v("A string or a list of strings.\nIf it is a list, the first entry is taken.")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("extension")])]),t._v(" "),e("dd",[t._v("File extension")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"make-paths-relative"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#make-paths-relative"}},[t._v("#")]),t._v(" make_paths_relative "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("make_paths_relative")]),t._v(" ("),t._v("\n            yaml_dirname: str,\n            cfg_dict: Dict,\n            path_keys: List[str] = None,\n          ) \n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Helper method to convert file system paths relative to the yaml config file,\nto paths relative to the current path.")]),t._v(" "),e("p",[t._v("It will recursively cycle through "),e("code",[t._v("cfg_dict")]),t._v(" if it is nested.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("yaml_dirname")])])]),t._v(" "),e("dd",[t._v("Dirname to the yaml config file (as obtained by "),e("code",[t._v("os.path.dirname")]),t._v(".")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("cfg_dict")])])]),t._v(" "),e("dd",[t._v("The config dictionary extracted from the yaml file.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("path_keys")])])]),t._v(" "),e("dd",[t._v("If not None, it will only try to modify the "),e("code",[t._v("cfg_dict")]),t._v(" values corresponding to the "),e("code",[t._v("path_keys")]),t._v(".")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"is-relative-file-system-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is-relative-file-system-path"}},[t._v("#")]),t._v(" is_relative_file_system_path "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("is_relative_file_system_path")]),t._v("("),e("span",[t._v("string: str) -> bool")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Helper method to check if a string is a relative file system path.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("string")])])]),t._v(" "),e("dd",[t._v("The string to be checked.")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("bool")])]),t._v(" "),e("dd",[t._v("Whether the string is a relative file system path or not.\nIf string is not type(str), return False.")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"flatten-dask-dataframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flatten-dask-dataframe"}},[t._v("#")]),t._v(" flatten_dask_dataframe "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("flatten_dask_dataframe")]),t._v("("),e("span",[t._v("data_frame: dask.dataframe.core.DataFrame) -> dask.dataframe.core.DataFrame")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Flatten an dataframe adding nested values as new columns\nand dropping the old ones\nParameters")]),t._v(" "),e("hr"),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("data_frame")])])]),t._v(" "),e("dd",[t._v("The original dask DataFrame")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("A new Dataframe with flatten content")])]),t._v(" "),e("dd",[t._v(" ")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"flatten-dataframe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flatten-dataframe"}},[t._v("#")]),t._v(" flatten_dataframe "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("flatten_dataframe")]),t._v("("),e("span",[t._v("data_frame: pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd"),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"save-dict-as-yaml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#save-dict-as-yaml"}},[t._v("#")]),t._v(" save_dict_as_yaml "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[t._v("          "),e("code",[t._v("\n          "),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("save_dict_as_yaml")]),t._v(" ("),t._v("\n            dictionary: dict,\n            path: str,\n            create_dirs: bool = True,\n          )  -> str\n          ")]),t._v("\n        ")])])]),t._v(" "),e("dd",[e("p",[t._v("Save a cfg dict to path as yaml")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("dictionary")])])]),t._v(" "),e("dd",[t._v("Dictionary to be saved")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("path")])])]),t._v(" "),e("dd",[t._v("Filesystem location where the yaml file will be saved")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("create_dirs")])])]),t._v(" "),e("dd",[t._v("If true, create directories in path.\nIf false, throw exception if directories in path do not exist.")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("path")])]),t._v(" "),e("dd",[t._v("Location of the yaml file")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);