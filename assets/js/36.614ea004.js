(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{392:function(t,s,e){"use strict";e.r(s);var a=e(26),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"biome-text-modules-heads-defs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-defs"}},[t._v("#")]),t._v(" biome.text.modules.heads.defs "),e("Badge",{attrs:{text:"Module"}})],1),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskoutput"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskoutput"}},[t._v("#")]),t._v(" TaskOutput "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskOutput")]),t._v(" ("),t._v("\n    "),e("span",[t._v("logits: torch.Tensor")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("loss: Union[torch.Tensor, NoneType] = None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("**extra_data")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Task output data class")]),t._v(" "),e("p",[t._v("A task output will contains almost the logits and probs properties")]),t._v(" "),e("dl",[e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"as-dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#as-dict"}},[t._v("#")]),t._v(" as_dict "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("as_dict")]),t._v("("),e("span",[t._v("self) -> Dict[str, torch.Tensor]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Dict reprentation of task output")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskname"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskname"}},[t._v("#")]),t._v(" TaskName "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskName")]),t._v(" ("),t._v("\n    "),e("span",[t._v("value")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("names=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("*")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("module=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("qualname=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("type=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("start=1")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("The task name enum structure")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[t._v("enum.Enum")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"class-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-variables"}},[t._v("#")]),t._v(" Class variables")]),t._v("\n")]),t._v(" "),e("dl",[e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.none"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("none")])])]),t._v(" "),e("dd"),t._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.text_classification"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("text_classification")])])]),t._v(" "),e("dd"),t._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.token_classification"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("token_classification")])])]),t._v(" "),e("dd"),t._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.language_modelling"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("language_modelling")])])]),t._v(" "),e("dd")]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskhead"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskhead"}},[t._v("#")]),t._v(" TaskHead "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskHead")]),t._v(" (backbone: "),e("a",{attrs:{title:"biome.text.backbone.ModelBackbone",href:"../../backbone.html#biome.text.backbone.ModelBackbone"}},[t._v("ModelBackbone")]),t._v(")"),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Base task head class")]),t._v(" "),e("p",[t._v("Initializes internal Module state, shared by both nn.Module and ScriptModule.")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-2"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[t._v("torch.nn.modules.module.Module")]),t._v(" "),e("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),e("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"subclasses"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subclasses"}},[t._v("#")]),t._v(" Subclasses")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.classification.defs.ClassificationHead",href:"classification/defs.html#biome.text.modules.heads.classification.defs.ClassificationHead"}},[t._v("ClassificationHead")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.language_modelling.LanguageModelling",href:"language_modelling.html#biome.text.modules.heads.language_modelling.LanguageModelling"}},[t._v("LanguageModelling")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.token_classification.TokenClassification",href:"token_classification.html#biome.text.modules.heads.token_classification.TokenClassification"}},[t._v("TokenClassification")])])]),t._v(" "),e("dl",[e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"register"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#register"}},[t._v("#")]),t._v(" register "),e("Badge",{attrs:{text:"Static method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("register")]),t._v(" ("),t._v("\n  overrides: bool = False,\n  **kwargs,\n) \n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Enables the task head component for pipeline loading")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"instance-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables"}},[t._v("#")]),t._v(" Instance variables")]),t._v("\n")]),t._v(" "),e("dl",[e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.labels"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("labels")]),t._v(" : List[str]")])]),t._v(" "),e("dd",[e("p",[t._v("The configured vocab labels")])]),t._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.num_labels"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("num_labels")])])]),t._v(" "),e("dd",[e("p",[t._v("The number of vocab labels")])])]),t._v(" "),e("dl",[e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"extend-labels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extend-labels"}},[t._v("#")]),t._v(" extend_labels "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("extend_labels")]),t._v(" ("),t._v("\n  self,\n  labels: List[str],\n) \n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Extends the number of labels")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"task-name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#task-name"}},[t._v("#")]),t._v(" task_name "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("task_name")]),t._v("("),e("span",[t._v("self) -> "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskName",href:"#biome.text.modules.heads.defs.TaskName"}},[t._v("TaskName")])]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("The task head name")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"inputs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[t._v("#")]),t._v(" inputs "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("inputs")]),t._v("("),e("span",[t._v("self) -> Union[List[str], NoneType]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("The expected inputs names for data featuring. If no defined,\nwill be automatically calculated from featurize signature")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"forward"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forward"}},[t._v("#")]),t._v(" forward "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("forward")]),t._v(" ("),t._v("\n  self,\n  *args: Any,\n  **kwargs: Any,\n)  -> "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[t._v("TaskOutput")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Defines the computation performed at every call.")]),t._v(" "),e("p",[t._v("Should be overridden by all subclasses.")]),t._v(" "),e("div",{staticClass:"admonition note"},[e("p",{staticClass:"admonition-title"},[t._v("Note")]),t._v(" "),e("p",[t._v("Although the recipe for forward pass needs to be defined within\nthis function, one should call the :class:"),e("code",[t._v("Module")]),t._v(" instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"get-metrics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-metrics"}},[t._v("#")]),t._v(" get_metrics "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("get_metrics")]),t._v(" ("),t._v("\n  self,\n  reset: bool = False,\n)  -> Dict[str, float]\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Metrics dictionary for training task")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"featurize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#featurize"}},[t._v("#")]),t._v(" featurize "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("featurize")]),t._v(" ("),t._v("\n  self,\n  *args,\n  **kwargs,\n)  -> Union[allennlp.data.instance.Instance, NoneType]\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Converts incoming data into an allennlp "),e("code",[t._v("Instance")]),t._v(", used for pyTorch tensors generation")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"decode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#decode"}},[t._v("#")]),t._v(" decode "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("decode")]),t._v(" ("),t._v("\n  self,\n  output: "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[t._v("TaskOutput")]),t._v(",\n)  -> "),e("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[t._v("TaskOutput")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Completes the output for the prediction")]),t._v(" "),e("p",[t._v("The base implementation adds nothing.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("output")])])]),t._v(" "),e("dd",[t._v("The output from the head's forward method")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("completed_output")])]),t._v(" "),e("dd",[t._v(" ")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"explain-prediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explain-prediction"}},[t._v("#")]),t._v(" explain_prediction "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("explain_prediction")]),t._v(" ("),t._v("\n  self,\n  prediction: Dict[str, "),e("built-in",{attrs:{function:"",array:""}},[t._v("],\n  instance: allennlp.data.instance.Instance,\n)  -> Dict[str, Any]\n")])],1),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Adds embedding explanations information to prediction output")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskheadspec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskheadspec"}},[t._v("#")]),t._v(" TaskHeadSpec "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskHeadSpec")]),t._v(" (*args, **kwds)"),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Layer spec for TaskHead components")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-3"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec"}},[t._v("ComponentSpec")])]),t._v(" "),e("li",[t._v("typing.Generic")]),t._v(" "),e("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"inherited-members"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members"}},[t._v("#")]),t._v(" Inherited members")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("code",[e("b",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec"}},[t._v("ComponentSpec")])])]),t._v(":\n"),e("ul",{staticClass:"hlist"},[e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.compile",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.compile"}},[t._v("compile")])])]),t._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.config",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.config"}},[t._v("config")])])]),t._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.from_params",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.from_params"}},[t._v("from_params")])])]),t._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.input_dim",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.input_dim"}},[t._v("input_dim")])])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);