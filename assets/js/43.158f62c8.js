(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{384:function(e,t,s){"use strict";s.r(t);var a=s(26),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"biome-text-modules-specs-defs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-specs-defs"}},[e._v("#")]),e._v(" biome.text.modules.specs.defs "),s("Badge",{attrs:{text:"Module"}})],1),e._v(" "),s("dl",[s("h2",{attrs:{id:"biome.text.modules.specs.defs.ComponentSpec"}},[e._v("ComponentSpec "),s("Badge",{attrs:{text:"Class"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[e._v("    "),s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("class")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("ComponentSpec")]),e._v(" (*args, **kwds)"),e._v("\n    ")])])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[e._v("The layer spec component allows create Pytorch modules lazily,\nand instantiate them inside a context (Model or other component) dimension layer chain.")]),e._v(" "),s("p",[e._v("The layer spec wraps a component params and will generate an instance of type T once the input_dim is set.")])]),e._v(" "),s("h3",[e._v("Ancestors")]),e._v(" "),s("ul",{staticClass:"hlist"},[s("li",[e._v("typing.Generic")]),e._v(" "),s("li",[e._v("allennlp.common.from_params.FromParams")])]),e._v(" "),s("h3",[e._v("Subclasses")]),e._v(" "),s("ul",{staticClass:"hlist"},[s("li",[s("a",{attrs:{title:"biome.text.modules.heads.defs.TaskHeadSpec",href:"../heads/defs.html#biome.text.modules.heads.defs.TaskHeadSpec"}},[e._v("TaskHeadSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.heads.doc_classification.DocumentClassificationSpec",href:"../heads/doc_classification.html#biome.text.modules.heads.doc_classification.DocumentClassificationSpec"}},[e._v("DocumentClassificationSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.heads.language_modelling.LanguageModellingSpec",href:"../heads/language_modelling.html#biome.text.modules.heads.language_modelling.LanguageModellingSpec"}},[e._v("LanguageModellingSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.heads.record_classification.RecordClassificationSpec",href:"../heads/record_classification.html#biome.text.modules.heads.record_classification.RecordClassificationSpec"}},[e._v("RecordClassificationSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.heads.text_classification.TextClassificationSpec",href:"../heads/text_classification.html#biome.text.modules.heads.text_classification.TextClassificationSpec"}},[e._v("TextClassificationSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.heads.token_classification.TokenClassificationSpec",href:"../heads/token_classification.html#biome.text.modules.heads.token_classification.TokenClassificationSpec"}},[e._v("TokenClassificationSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.specs.allennlp_specs.BiMpmMatchingSpec",href:"allennlp_specs.html#biome.text.modules.specs.allennlp_specs.BiMpmMatchingSpec"}},[e._v("BiMpmMatchingSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.specs.allennlp_specs.FeedForwardSpec",href:"allennlp_specs.html#biome.text.modules.specs.allennlp_specs.FeedForwardSpec"}},[e._v("FeedForwardSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.specs.allennlp_specs.Seq2SeqEncoderSpec",href:"allennlp_specs.html#biome.text.modules.specs.allennlp_specs.Seq2SeqEncoderSpec"}},[e._v("Seq2SeqEncoderSpec")])]),e._v(" "),s("li",[s("a",{attrs:{title:"biome.text.modules.specs.allennlp_specs.Seq2VecEncoderSpec",href:"allennlp_specs.html#biome.text.modules.specs.allennlp_specs.Seq2VecEncoderSpec"}},[e._v("Seq2VecEncoderSpec")])])]),e._v(" "),s("dl",[s("h3",{attrs:{id:"biome.text.modules.specs.defs.ComponentSpec.from_params"}},[e._v("from_params "),s("Badge",{attrs:{text:"Static method"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("from_params")]),e._v(" ("),e._v("\n   params: allennlp.common.params.Params,\n   **extras,\n)  -> ~T\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[e._v("This is the automatic implementation of "),s("code",[e._v("from_params")]),e._v(". Any class that subclasses "),s("code",[e._v("FromParams")]),e._v("\n(or "),s("code",[e._v("Registrable")]),e._v(", which itself subclasses "),s("code",[e._v("FromParams")]),e._v(') gets this implementation for free.\nIf you want your class to be instantiated from params in the "obvious" way – pop off parameters\nand hand them to your constructor with the same names – this provides that functionality.')]),e._v(" "),s("p",[e._v("If you need more complex logic in your from "),s("code",[e._v("from_params")]),e._v(" method, you'll have to implement\nyour own method that overrides this one.")])])])]),e._v(" "),s("h3",[e._v("Instance variables")]),e._v(" "),s("dl",[s("dt",{attrs:{id:"biome.text.modules.specs.defs.ComponentSpec.config"}},[s("code",{staticClass:"name"},[e._v("var "),s("span",{staticClass:"ident"},[e._v("config")]),e._v(" : Dict[str, Any]")])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[e._v("Component read-only configuration")])])])]),e._v(" "),s("dl",[s("h3",{attrs:{id:"biome.text.modules.specs.defs.ComponentSpec.input_dim"}},[e._v("input_dim "),s("Badge",{attrs:{text:"Method"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("input_dim")]),e._v(" ("),e._v("\n   self,\n   input_dim: int,\n)  -> "),s("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"#biome.text.modules.specs.defs.ComponentSpec"}},[e._v("ComponentSpec")]),e._v("\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[e._v("Sets the input dimension attribute for this layer configuration")])])]),e._v(" "),s("h3",{attrs:{id:"biome.text.modules.specs.defs.ComponentSpec.compile"}},[e._v("compile "),s("Badge",{attrs:{text:"Method"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("compile")]),e._v(" ("),e._v("\n   self,\n   **extras,\n)  -> ~T\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[e._v("Using the wrapped configuration and the input dimension, generates a\ninstance of type T representing the layer configuration")])])])])])])])}),[],!1,null,null,null);t.default=i.exports}}]);