(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{422:function(e,t,i){"use strict";i.r(t);var a=i(18),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"biome-text-api-new-pipeline"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-api-new-pipeline"}},[e._v("#")]),e._v(" biome.text.api_new.pipeline "),i("Badge",{attrs:{text:"Module"}})],1),e._v(" "),i("dl",[i("h2",{attrs:{id:"biome.text.api_new.pipeline.Pipeline"}},[e._v("Pipeline "),i("Badge",{attrs:{text:"Class"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[e._v("    "),i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("class")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("Pipeline")]),e._v(" (pretrained_path: Union[str, NoneType] = None, config: Union[biome.text.api_new.configuration.PipelineConfiguration, NoneType] = None)"),e._v("\n    ")])])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Manages NLP models configuration and actions.")]),e._v(" "),i("p",[e._v("Use "),i("code",[i("a",{attrs:{title:"biome.text.api_new.pipeline.Pipeline",href:"#biome.text.api_new.pipeline.Pipeline"}},[e._v("Pipeline")])]),e._v(" for creating new models from a configuration or loading a pre-trained model.")]),e._v(" "),i("p",[e._v("Use instantiated Pipelines for training from scratch, fine-tuning, predicting, serving, or exploring predictions.")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v('pretrained_path: <code>Optional\\[str]</code>\n    The path to the model.tar.gz of a pre-trained <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\nconfig: <code>Optional\\[PipelineConfiguration]</code>\n    A <code>PipelineConfiguration</code> object defining the configuration of the fresh <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>.\n')])])]),e._v(" "),i("dl",[i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.from_file"}},[e._v("from_file "),i("Badge",{attrs:{text:"Static method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("from_file")]),e._v(" ("),e._v("\n   path: str,\n   vocab_config: Union[biome.text.api_new.configuration.VocabularyConfiguration, NoneType] = None,\n)  -> "),i("a",{attrs:{title:"biome.text.api_new.pipeline.Pipeline",href:"#biome.text.api_new.pipeline.Pipeline"}},[e._v("Pipeline")]),e._v("\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Creates a pipeline from a config yaml file path")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v('path: <code>str</code>\n    The path to a YAML configuration file\nvocab_config: <code>Optional\\[VocabularyConfiguration]</code>\n    A <code>PipelineConfiguration</code> object defining the configuration of a fresh <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>.\n')])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v('pipeline: <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\n    A configured pipeline\n')])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.from_config"}},[e._v("from_config "),i("Badge",{attrs:{text:"Static method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("from_config")]),e._v(" ("),e._v("\n   config: Union[str, biome.text.api_new.configuration.PipelineConfiguration],\n   vocab_config: Union[biome.text.api_new.configuration.VocabularyConfiguration, NoneType] = None,\n)  -> "),i("a",{attrs:{title:"biome.text.api_new.pipeline.Pipeline",href:"#biome.text.api_new.pipeline.Pipeline"}},[e._v("Pipeline")]),e._v("\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Creates a pipeline from a "),i("code",[e._v("PipelineConfiguration")]),e._v(" object")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("config: <code>Union\\[str, PipelineConfiguration]</code>\n    A <code>PipelineConfiguration</code> object or a YAML <code>str</code> for the pipeline configuration\nvocab_config: <code>Optional\\[VocabularyConfiguration]</code>\n    A <code>VocabularyConfiguration</code> object for associating a vocabulary to the pipeline\n")])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v('pipeline: <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\n    A configured pipeline\n')])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.from_pretrained"}},[e._v("from_pretrained "),i("Badge",{attrs:{text:"Static method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("from_pretrained")]),e._v(" ("),e._v("\n   path: str,\n   **kwargs,\n)  -> "),i("a",{attrs:{title:"biome.text.api_new.pipeline.Pipeline",href:"#biome.text.api_new.pipeline.Pipeline"}},[e._v("Pipeline")]),e._v("\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Loads a pipeline from a pre-trained pipeline from a model.tar.gz file path")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v('path: <code>str</code>\n    The path to the model.tar.gz file of a pre-trained <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\n')])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v('pipeline: <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\n    A configured pipeline\n')])])])])]),e._v(" "),i("h3",[e._v("Instance variables")]),e._v(" "),i("dl",[i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.name"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("name")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Gets pipeline\nname")])])]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.inputs"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("inputs")]),e._v(" : List[str]")])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Gets pipeline input field names")])])]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.output"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("output")]),e._v(" : str")])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Gets pipeline output field names")])])]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.model"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("model")]),e._v(" : "),i("a",{attrs:{title:"biome.text.api_new.model.Model",href:"model.html#biome.text.api_new.model.Model"}},[e._v("Model")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Gets pipeline backbone model")])])]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.head"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("head")]),e._v(" : "),i("a",{attrs:{title:"biome.text.api_new.modules.heads.defs.TaskHead",href:"modules/heads/defs.html#biome.text.api_new.modules.heads.defs.TaskHead"}},[e._v("TaskHead")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Gets pipeline task head")])])]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.config"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("config")]),e._v(" : "),i("a",{attrs:{title:"biome.text.api_new.configuration.PipelineConfiguration",href:"configuration.html#biome.text.api_new.configuration.PipelineConfiguration"}},[e._v("PipelineConfiguration")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"})]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.trained_path"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("trained_path")]),e._v(" : str")])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Path to binary file when load from binary")])])]),e._v(" "),i("dt",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.type_name"}},[i("code",{staticClass:"name"},[e._v("var "),i("span",{staticClass:"ident"},[e._v("type_name")]),e._v(" : str")])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("The pipeline name. Equivalent to task head name")])])])]),e._v(" "),i("dl",[i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.train"}},[e._v("train "),i("Badge",{attrs:{text:"Method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("train")]),e._v(" ("),e._v("\n   self,\n   output: str,\n   trainer: "),i("a",{attrs:{title:"biome.text.api_new.configuration.TrainerConfiguration",href:"configuration.html#biome.text.api_new.configuration.TrainerConfiguration"}},[e._v("TrainerConfiguration")]),e._v(",\n   training: str,\n   validation: Union[str, NoneType] = None,\n   test: Union[str, NoneType] = None,\n   vocab: Union[str, NoneType] = None,\n   verbose: bool = False,\n)  -> "),i("a",{attrs:{title:"biome.text.api_new.pipeline.Pipeline",href:"#biome.text.api_new.pipeline.Pipeline"}},[e._v("Pipeline")]),e._v("\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Launches a training run with the specified configurations and datasources")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("output: <code>str</code>\n    The experiment output path\ntrainer: <code>str</code>\n    The trainer file path\ntraining: <code>str</code>\n    The train datasource file path\nvalidation: <code>Optional\\[str]</code>\n    The validation datasource file path\ntest: <code>Optional\\[str]</code>\n    The test datasource file path\nvocab: <code>Optional\\[str]</code>\n    The path to an existing vocabulary\nverbose: <code>bool</code>\n    Turn on verbose logs\n")])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v('pipeline: <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\n    A configured pipeline\n')])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.predict"}},[e._v("predict "),i("Badge",{attrs:{text:"Method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("predict")]),e._v(" ("),e._v("\n   self,\n   *args,\n   **kwargs,\n)  -> Dict[str, numpy.ndarray]\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Predicts over some input data with current state of the model")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("args: `*args`\nkwargs: `**kwargs`\n")])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v("predictions: <code>Dict\\[str, numpy.ndarray]</code>\n    A dictionary containing the predictions and additional information\n")])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.explain"}},[e._v("explain "),i("Badge",{attrs:{text:"Method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("explain")]),e._v(" ("),e._v("\n   self,\n   *args,\n   **kwargs,\n)  -> Dict[str, Any]\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Predicts over some input data with current state of the model and provides explanations of token importance.")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("args: `*args`\nkwargs: `**kwargs`\n")])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v("predictions: <code>Dict\\[str, numpy.ndarray]</code>\n    A dictionary containing the predictions with token importance calculated using IntegratedGradients\n")])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.explore"}},[e._v("explore "),i("Badge",{attrs:{text:"Method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("explore")]),e._v(" ("),e._v("\n   self,\n   ds_path: str,\n   explore_id: Union[str, NoneType] = None,\n   es_host: Union[str, NoneType] = None,\n   batch_size: int = 500,\n   prediction_cache_size: int = 0,\n   explain: bool = False,\n   force_delete: bool = True,\n   **metadata,\n)  -> dask.dataframe.core.DataFrame\n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Launches Explore UI for a given datasource with current model")]),e._v(" "),i("p",[e._v("Running this method inside a an "),i("code",[e._v("IPython")]),e._v(" notebook will try to render the UI directly in the notebook.")]),e._v(" "),i("p",[e._v("Running this outside a notebook will try to launch the standalone web application.")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("ds_path: <code>str</code>\n    The path to the configuration of a datasource\nexplore_id: <code>Optional\\[str]</code>\n    A name or id for this explore run, useful for running and keep track of several explorations\nes_host: <code>Optional\\[str]</code>\n    The URL to the Elasticsearch host for indexing predictions (default is `localhost:9200`)\nbatch_size: <code>int</code>\n    The batch size for indexing predictions (default is `500)\nprediction_cache_size: <code>int</code>\n    The size of the cache for caching predictions (default is `0)\nexplain: <code>bool</code>\n    Whether to extract and return explanations of token importance (default is <code>False</code>)\nforce_delete: <code>bool</code>\n    Deletes exploration with the same <code>explore\\_id</code> before indexing the new explore items (default is `True)\n")])]),e._v(" "),i("h1",{attrs:{id:"returns"}},[e._v("Returns")]),e._v(" "),i("pre",[i("code",[e._v('pipeline: <code><a title="biome.text.api_new.pipeline.Pipeline" href="#biome.text.api_new.pipeline.Pipeline">Pipeline</a></code>\n    A configured pipeline\n')])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.serve"}},[e._v("serve "),i("Badge",{attrs:{text:"Method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("serve")]),e._v(" ("),e._v("\n   self,\n   port: int = 9998,\n) \n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Launches a REST prediction service with current model in a specified port (default is `9998)")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("port: <code>int</code>\n    The port to make available the prediction service\n")])])])]),e._v(" "),i("h3",{attrs:{id:"biome.text.api_new.pipeline.Pipeline.set_head"}},[e._v("set_head "),i("Badge",{attrs:{text:"Method"}})],1),e._v(" "),i("dt",[i("div",{staticClass:"language-python extra-class"},[i("pre",{staticClass:"language-python"},[i("code",[e._v("\n"),i("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),i("span",{staticClass:"ident"},[e._v("set_head")]),e._v(" ("),e._v("\n   self,\n   type: Type["),i("a",{attrs:{title:"biome.text.api_new.modules.heads.defs.TaskHead",href:"modules/heads/defs.html#biome.text.api_new.modules.heads.defs.TaskHead"}},[e._v("TaskHead")]),e._v("],\n   **params,\n) \n")]),e._v("\n        ")])])]),e._v(" "),i("dd",[i("div",{staticClass:"desc"},[i("p",[e._v("Sets a new task head for the pipeline")]),e._v(" "),i("p",[e._v("Use this to reuse the weights and config of a pre-trained model (e.g., language model) for a new task.")]),e._v(" "),i("h1",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),i("pre",[i("code",[e._v("type: <code>Type\\[TaskHead]</code>\n    The <code>TaskHead</code> class to be set for the pipeline (e.g., <code>TextClassification</code>\nparams: `**kwargs`\n    The <code>TaskHead</code> specific parameters (e.g., classification head needs a <code>pooler</code> layer)\n")])])])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);