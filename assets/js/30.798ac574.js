(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{406:function(t,e,s){"use strict";s.r(e);var a=s(26),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"biome-text-metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-metrics"}},[t._v("#")]),t._v(" biome.text.metrics "),s("Badge",{attrs:{text:"Module"}})],1),t._v(" "),s("div"),t._v(" "),s("div"),t._v(" "),s("pre",{staticClass:"title"},[s("h2",{attrs:{id:"multilabelf1measure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multilabelf1measure"}},[t._v("#")]),t._v(" MultiLabelF1Measure "),s("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("MultiLabelF1Measure")]),t._v(" ()"),t._v("\n")]),t._v("\n")]),t._v(" "),s("p",[t._v("Computes overall F1 for multilabel classification tasks.\nPredictions sent to the "),s("strong",[t._v("call")]),t._v(" function are logits and it turns them into 0 or 1s.\nUsed for "),s("code",[t._v("classification heads")]),t._v(" with the "),s("code",[t._v("multilabel")]),t._v(" parameter enabled.")]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"ancestors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),s("ul",{staticClass:"hlist"},[s("li",[t._v("allennlp.training.metrics.metric.Metric")]),t._v(" "),s("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),s("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),s("dl",[s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"get-metric"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-metric"}},[t._v("#")]),t._v(" get_metric "),s("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("get_metric")]),t._v(" ("),t._v("\n  self,\n  reset: bool = False,\n) \n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),s("p",[s("code",[t._v("Dict[str, float]")]),t._v("\nA Dict with:\n- precision : "),s("code",[t._v("float")]),t._v("\n- recall : "),s("code",[t._v("float")]),t._v("\n- f1-measure : "),s("code",[t._v("float")])])]),t._v(" "),s("pre",{staticClass:"title"},[s("h3",{attrs:{id:"reset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset "),s("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),s("span",{staticClass:"ident"},[t._v("reset")]),t._v("("),s("span",[t._v("self)")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),s("dd",[s("p",[t._v("Reset any accumulators or internal state.")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);