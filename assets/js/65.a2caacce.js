(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{360:function(t,e,n){"use strict";n.r(e);var r=n(33),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"biome-text-interpreters-integrated-gradient"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-interpreters-integrated-gradient"}},[t._v("#")]),t._v(" biome.text.interpreters.integrated_gradient "),n("Badge",{attrs:{text:"Module"}})],1),t._v(" "),n("dl",[n("h2",{attrs:{id:"biome.text.interpreters.integrated_gradient.IntegratedGradient"}},[t._v("IntegratedGradient "),n("Badge",{attrs:{text:"Class"}})],1),t._v(" "),n("dt",[n("div",{staticClass:"language-python extra-class"},[n("pre",{staticClass:"language-python"},[t._v("    "),n("code",[t._v("\n"),n("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),n("span",{staticClass:"ident"},[t._v("IntegratedGradient")]),t._v(" (predictor: allennlp.predictors.predictor.Predictor)"),t._v("\n    ")])])])]),t._v(" "),n("dd",[n("div",{staticClass:"desc"},[n("p",[t._v("Interprets the prediction using Integrated Gradients ("),n("a",{attrs:{href:"https://arxiv.org/abs/1703.01365"}},[t._v("https://arxiv.org/abs/1703.01365")]),t._v(")")])]),t._v(" "),n("h3",[t._v("Ancestors")]),t._v(" "),n("ul",{staticClass:"hlist"},[n("li",[t._v("allennlp.interpret.saliency_interpreters.integrated_gradient.IntegratedGradient")]),t._v(" "),n("li",[t._v("allennlp.interpret.saliency_interpreters.saliency_interpreter.SaliencyInterpreter")]),t._v(" "),n("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),n("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),n("dl",[n("h3",{attrs:{id:"biome.text.interpreters.integrated_gradient.IntegratedGradient.saliency_interpret_from_json"}},[t._v("saliency_interpret_from_json "),n("Badge",{attrs:{text:"Method"}})],1),t._v(" "),n("dt",[n("div",{staticClass:"language-python extra-class"},[n("pre",{staticClass:"language-python"},[n("code",[t._v("\n"),n("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),n("span",{staticClass:"ident"},[t._v("saliency_interpret_from_json")]),t._v(" ("),t._v("\n   self,\n   inputs: Dict[str, Any],\n)  -> Dict[str, Any]\n")]),t._v("\n        ")])])]),t._v(" "),n("dd",[n("div",{staticClass:"desc"},[n("p",[t._v("This function finds a modification to the input text that would change the model's\nprediction in some desired manner (e.g., an adversarial attack).")]),t._v(" "),n("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),n("dl",[n("dt",[n("strong",[n("code",[t._v("inputs")])]),t._v(" : "),n("code",[t._v("JsonDict")])]),t._v(" "),n("dd",[t._v("The input you want to interpret (the same as the argument to a Predictor, e.g., predict_json()).")])]),t._v(" "),n("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),n("dl",[n("dt",[n("strong",[n("code",[t._v("interpretation")])]),t._v(" : "),n("code",[t._v("JsonDict")])]),t._v(" "),n("dd",[t._v("Contains the normalized saliency values for each input token. The dict has entries for\neach instance in the inputs JsonDict, e.g., "),n("code",[t._v("{instance_1: ..., instance_2:, ... }")]),t._v(".\nEach one of those entries has entries for the saliency of the inputs, e.g.,\n"),n("code",[t._v("{grad_input_1: ..., grad_input_2: ... }")]),t._v(".")])])])])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);