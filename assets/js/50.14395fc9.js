(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{428:function(e,t,a){"use strict";a.r(t);var s=a(26),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"biome-text-modules-heads-token-classification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-token-classification"}},[e._v("#")]),e._v(" biome.text.modules.heads.token_classification "),a("Badge",{attrs:{text:"Module"}})],1),e._v(" "),a("div"),e._v(" "),a("div"),e._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"tokenclassification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tokenclassification"}},[e._v("#")]),e._v(" TokenClassification "),a("Badge",{attrs:{text:"Class"}})],1),e._v("\n")]),e._v(" "),a("pre",{staticClass:"language-python"},[a("code",[e._v("\n"),a("span",{staticClass:"token keyword"},[e._v("class")]),e._v(" "),a("span",{staticClass:"ident"},[e._v("TokenClassification")]),e._v(" ("),e._v("\n    "),a("span",[e._v("backbone: "),a("a",{attrs:{title:"biome.text.backbone.ModelBackbone",href:"../../backbone.html#biome.text.backbone.ModelBackbone"}},[e._v("ModelBackbone")])]),a("span",[e._v(",")]),e._v("\n    "),a("span",[e._v("labels: List[str]")]),a("span",[e._v(",")]),e._v("\n    "),a("span",[e._v("label_encoding: Union[str, NoneType] = 'BIOUL'")]),a("span",[e._v(",")]),e._v("\n    "),a("span",[e._v("top_k: int = 1")]),a("span",[e._v(",")]),e._v("\n    "),a("span",[e._v("dropout: Union[float, NoneType] = 0.0")]),a("span",[e._v(",")]),e._v("\n    "),a("span",[e._v("feedforward: Union["),a("a",{attrs:{title:"biome.text.modules.configuration.allennlp_configuration.FeedForwardConfiguration",href:"../configuration/allennlp_configuration.html#biome.text.modules.configuration.allennlp_configuration.FeedForwardConfiguration"}},[e._v("FeedForwardConfiguration")]),e._v(", NoneType] = None")]),a("span",[e._v(",")]),e._v("\n"),a("span",[e._v(")")]),e._v("\n")]),e._v("\n")]),e._v(" "),a("p",[e._v("Task head for token classification (NER)")]),e._v(" "),a("h2",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),a("dl",[a("dt",[a("strong",[a("code",[e._v("backbone")])])]),e._v(" "),a("dd",[e._v("The model backbone")]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("labels")])])]),e._v(" "),a("dd",[e._v("List span labels. Span labels get converted to tag labels internally, using\nconfigured label_encoding for that.")]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("label_encoding")])])]),e._v(" "),a("dd",[e._v("The format of the tags. Supported encodings are: ['BIO', 'BIOUL']")]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("top_k")])])]),e._v(" "),a("dd",[e._v(" ")]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("dropout")])])]),e._v(" "),a("dd",[e._v(" ")]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("feedforward")])])]),e._v(" "),a("dd",[e._v(" ")])]),e._v(" "),a("p",[e._v("Initializes internal Module state, shared by both nn.Module and ScriptModule.")]),e._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[e._v("#")]),e._v(" Ancestors")]),e._v("\n")]),e._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead"}},[e._v("TaskHead")])]),e._v(" "),a("li",[e._v("torch.nn.modules.module.Module")]),e._v(" "),a("li",[e._v("allennlp.common.registrable.Registrable")]),e._v(" "),a("li",[e._v("allennlp.common.from_params.FromParams")])]),e._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"instance-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables"}},[e._v("#")]),e._v(" Instance variables")]),e._v("\n")]),e._v(" "),a("dl",[a("dt",{attrs:{id:"biome.text.modules.heads.token_classification.TokenClassification.span_labels"}},[a("code",{staticClass:"name"},[e._v("var "),a("span",{staticClass:"ident"},[e._v("span_labels")]),e._v(" : List[str]")])]),e._v(" "),a("dd")]),e._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"featurize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#featurize"}},[e._v("#")]),e._v(" featurize "),a("Badge",{attrs:{text:"Method"}})],1),e._v("\n")]),e._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[e._v("\n"),a("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),a("span",{staticClass:"ident"},[e._v("featurize")]),e._v(" ("),e._v("\n  self,\n  text: Union[str, List[str]],\n  entities: Union[List[dict], NoneType] = None,\n  tags: Union[List[str], List[int], NoneType] = None,\n)  -> Union[allennlp.data.instance.Instance, NoneType]\n")]),e._v("\n")])])]),e._v(" "),a("dd",[a("h2",{attrs:{id:"parameters"}},[e._v("Parameters")]),e._v(" "),a("dl",[a("dt",[a("strong",[a("code",[e._v("text")])])]),e._v(" "),a("dd",[e._v("Can be either a simple str or a list of str,\nin which case it will be treated as a list of pretokenized tokens")]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("entities")])])]),e._v(" "),a("dd",[a("p",[e._v("A list of span labels")]),e._v(" "),a("p",[e._v("Span labels are dictionaries that contain:")]),e._v(" "),a("p",[e._v("'start': int, char index of the start of the span\n'end': int, char index of the end of the span (exclusive)\n'label': str, label of the span")]),e._v(" "),a("p",[e._v("They are used with the "),a("code",[e._v("spacy.gold.biluo_tags_from_offsets")]),e._v(" method.")])]),e._v(" "),a("dt",[a("strong",[a("code",[e._v("tags")])])]),e._v(" "),a("dd",[e._v("A list of tags in the BIOUL or BIO format.")])])])]),e._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"inherited-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members"}},[e._v("#")]),e._v(" Inherited members")]),e._v("\n")]),e._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("b",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead"}},[e._v("TaskHead")])])]),e._v(":\n"),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.decode",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.decode"}},[e._v("decode")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.explain_prediction",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.explain_prediction"}},[e._v("explain_prediction")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.extend_labels",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.extend_labels"}},[e._v("extend_labels")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.forward",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.forward"}},[e._v("forward")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.get_metrics",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.get_metrics"}},[e._v("get_metrics")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.inputs",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.inputs"}},[e._v("inputs")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.labels",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.labels"}},[e._v("labels")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.num_labels",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.num_labels"}},[e._v("num_labels")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.on_vocab_update",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.on_vocab_update"}},[e._v("on_vocab_update")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.register",href:"task_head.html#biome.text.modules.heads.task_head.TaskHead.register"}},[e._v("register")])])])])])]),e._v(" "),a("div"),e._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"tokenclassificationconfiguration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tokenclassificationconfiguration"}},[e._v("#")]),e._v(" TokenClassificationConfiguration "),a("Badge",{attrs:{text:"Class"}})],1),e._v("\n")]),e._v(" "),a("pre",{staticClass:"language-python"},[a("code",[e._v("\n"),a("span",{staticClass:"token keyword"},[e._v("class")]),e._v(" "),a("span",{staticClass:"ident"},[e._v("TokenClassificationConfiguration")]),e._v(" (*args, **kwds)"),e._v("\n")]),e._v("\n")]),e._v(" "),a("p",[e._v("Configuration for classification head components")]),e._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-2"}},[e._v("#")]),e._v(" Ancestors")]),e._v("\n")]),e._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration"}},[e._v("ComponentConfiguration")])]),e._v(" "),a("li",[e._v("typing.Generic")]),e._v(" "),a("li",[e._v("allennlp.common.from_params.FromParams")])]),e._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"inherited-members-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members-2"}},[e._v("#")]),e._v(" Inherited members")]),e._v("\n")]),e._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("b",[a("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration"}},[e._v("ComponentConfiguration")])])]),e._v(":\n"),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.compile",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.compile"}},[e._v("compile")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.config",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.config"}},[e._v("config")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.from_params",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.from_params"}},[e._v("from_params")])])]),e._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.input_dim",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.input_dim"}},[e._v("input_dim")])])])])])])])}),[],!1,null,null,null);t.default=o.exports}}]);