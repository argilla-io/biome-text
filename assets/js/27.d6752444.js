(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{399:function(t,a,e){"use strict";e.r(a);var s=e(26),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"biome-text-helpers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-helpers"}},[t._v("#")]),t._v(" biome.text.helpers "),e("Badge",{attrs:{text:"Module"}})],1),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"yaml-to-dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yaml-to-dict"}},[t._v("#")]),t._v(" yaml_to_dict "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("yaml_to_dict")]),t._v("("),e("span",[t._v("filepath: str) -> Dict[str, Any]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Loads a yaml file into a data dictionary")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"get-compatible-doc-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-compatible-doc-type"}},[t._v("#")]),t._v(" get_compatible_doc_type "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("get_compatible_doc_type")]),t._v("("),e("span",[t._v("client: elasticsearch.client.Elasticsearch) -> str")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Find a compatible name for doc type by checking the cluster info\nParameters")]),t._v(" "),e("hr"),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("client")])])]),t._v(" "),e("dd",[t._v("The elasticsearch client")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("pre",[e("code",[t._v("A compatible name for doc type in function of cluster version\n")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"get-env-cuda-device"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-env-cuda-device"}},[t._v("#")]),t._v(" get_env_cuda_device "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("get_env_cuda_device")]),t._v("("),e("span",[t._v(") -> int")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Gets the cuda device from an environment variable.")]),t._v(" "),e("p",[t._v("This is necessary to activate a GPU if available")]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("cuda_device")])]),t._v(" "),e("dd",[t._v("The integer number of the CUDA device")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"update-method-signature"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update-method-signature"}},[t._v("#")]),t._v(" update_method_signature "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("update_method_signature")]),t._v(" ("),t._v("\n  signature: inspect.Signature,\n  to_method,\n) \n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Updates signature to method")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"isgeneric"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isgeneric"}},[t._v("#")]),t._v(" isgeneric "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("isgeneric")]),t._v("("),e("span",[t._v("class_type: Type) -> bool")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Checks if a class type is a generic type (List[str] or Union[str, int]")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"is-running-on-notebook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is-running-on-notebook"}},[t._v("#")]),t._v(" is_running_on_notebook "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("is_running_on_notebook")]),t._v("("),e("span",[t._v(") -> bool")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Checks if code is running inside a jupyter notebook")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"split-signature-params-by-predicate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#split-signature-params-by-predicate"}},[t._v("#")]),t._v(" split_signature_params_by_predicate "),e("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("split_signature_params_by_predicate")]),t._v(" ("),t._v("\n  signature_function: Callable,\n  predicate: Callable,\n)  -> Tuple[List[inspect.Parameter], List[inspect.Parameter]]\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Splits parameters signature by defined boolean predicate function")])])])}),[],!1,null,null,null);a.default=n.exports}}]);