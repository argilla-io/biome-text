(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{390:function(t,e,a){"use strict";a.r(e);var s=a(26),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"biome-text-features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-features"}},[t._v("#")]),t._v(" biome.text.features "),a("Badge",{attrs:{text:"Module"}})],1),t._v(" "),a("div"),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"wordfeatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wordfeatures"}},[t._v("#")]),t._v(" WordFeatures "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("WordFeatures")]),t._v(" ("),t._v("\n    "),a("span",[t._v("embedding_dim: int")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("lowercase_tokens: bool = False")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("trainable: bool = True")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("weights_file: Union[str, NoneType] = None")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("**extra_params")]),a("span",[t._v(",")]),t._v("\n"),a("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),a("p",[t._v("Feature configuration at word level")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("embedding_dim")])])]),t._v(" "),a("dd",[t._v("Dimension of the embeddings")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("lowercase_tokens")])])]),t._v(" "),a("dd",[t._v("If True, lowercase tokens before the indexing")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("trainable")])])]),t._v(" "),a("dd",[t._v("If False, freeze the embeddings")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("weights_file")])])]),t._v(" "),a("dd",[t._v("Path to a file with pretrained weights for the embedding")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("**extra_params")])])]),t._v(" "),a("dd",[t._v("Extra parameters passed on to the "),a("code",[t._v("indexer")]),t._v(" and "),a("code",[t._v("embedder")]),t._v(" of the AllenNLP configuration framework.\nFor example: "),a("code",[t._v('WordFeatures(embedding_dim=300, embedder={"padding_index": 0})')])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"instance-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables"}},[t._v("#")]),t._v(" Instance variables")]),t._v("\n")]),t._v(" "),a("dl",[a("dt",{attrs:{id:"biome.text.features.WordFeatures.config"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("config")]),t._v(" : Dict")])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config in AllenNLP format")])])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"to-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-json"}},[t._v("#")]),t._v(" to_json "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("to_json")]),t._v("("),a("span",[t._v("self) -> Dict")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config as dict for the serialized json config file")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"to-dict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-dict"}},[t._v("#")]),t._v(" to_dict "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("to_dict")]),t._v("("),a("span",[t._v("self) -> Dict")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config as dict")])])]),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"charfeatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#charfeatures"}},[t._v("#")]),t._v(" CharFeatures "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("CharFeatures")]),t._v(" ("),t._v("\n    "),a("span",[t._v("embedding_dim: int")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("encoder: Dict[str, Any]")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("dropout: float = 0.0")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("lowercase_characters: bool = False")]),a("span",[t._v(",")]),t._v("\n    "),a("span",[t._v("**extra_params")]),a("span",[t._v(",")]),t._v("\n"),a("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),a("p",[t._v("Feature configuration at character level")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("embedding_dim")])])]),t._v(" "),a("dd",[t._v("Dimension of the character embeddings.")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("encoder")])])]),t._v(" "),a("dd",[t._v("A sequence to vector encoder resulting in a word representation based on its characters")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("dropout")])])]),t._v(" "),a("dd",[t._v("Dropout applied to the output of the encoder")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("lowercase_characters")])])]),t._v(" "),a("dd",[t._v("If True, lowercase characters before the indexing")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("**extra_params")])])]),t._v(" "),a("dd",[t._v("Extra parameters passed on to the "),a("code",[t._v("indexer")]),t._v(" and "),a("code",[t._v("embedder")]),t._v(" of the AllenNLP configuration framework.\nFor example: "),a("code",[t._v('CharFeatures(embedding_dim=32, indexer={"min_padding_length": 5}, ...)')])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"instance-variables-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables-2"}},[t._v("#")]),t._v(" Instance variables")]),t._v("\n")]),t._v(" "),a("dl",[a("dt",{attrs:{id:"biome.text.features.CharFeatures.config"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("config")]),t._v(" : Dict")])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config in AllenNLP format")])])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"to-json-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-json-2"}},[t._v("#")]),t._v(" to_json "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("to_json")]),t._v("("),a("span",[t._v("self)")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config as dict for the serialized json config file")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"to-dict-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-dict-2"}},[t._v("#")]),t._v(" to_dict "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("to_dict")]),t._v("("),a("span",[t._v("self)")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config as dict")])])]),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"transformersfeatures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transformersfeatures"}},[t._v("#")]),t._v(" TransformersFeatures "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("TransformersFeatures")]),t._v(" (model_name: str, trainable: bool = False)"),t._v("\n")]),t._v("\n")]),t._v(" "),a("p",[t._v("Configuration of the feature extracted with the "),a("a",{attrs:{href:"https://huggingface.co/models"}},[t._v("transformers models")]),t._v(".")]),t._v(" "),a("p",[t._v('We use AllenNLPs "mismatched" indexer and embedder to get word-level representations.\nMost of the transformers models work with word-piece tokenizers.')]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("model_name")])])]),t._v(" "),a("dd",[t._v("Name of one of the "),a("a",{attrs:{href:"https://huggingface.co/models"}},[t._v("transformers models")]),t._v(".")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("trainable")])])]),t._v(" "),a("dd",[t._v("If false, freeze the transformer weights")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"instance-variables-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables-3"}},[t._v("#")]),t._v(" Instance variables")]),t._v("\n")]),t._v(" "),a("dl",[a("dt",{attrs:{id:"biome.text.features.TransformersFeatures.config"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("config")]),t._v(" : Dict")])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config in AllenNLP format")])])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"to-dict-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-dict-3"}},[t._v("#")]),t._v(" to_dict "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("to_dict")]),t._v("("),a("span",[t._v("self) -> Dict")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config as dict")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"to-json-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-json-3"}},[t._v("#")]),t._v(" to_json "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("to_json")]),t._v("("),a("span",[t._v("self) -> Dict")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Returns the config as dict for the serialized json config file")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);