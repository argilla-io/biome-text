(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{406:function(t,e,a){"use strict";a.r(e);var s=a(26),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"biome-text-loggers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-loggers"}},[t._v("#")]),t._v(" biome.text.loggers "),a("Badge",{attrs:{text:"Module"}})],1),t._v(" "),a("div"),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"basetrainlogger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basetrainlogger"}},[t._v("#")]),t._v(" BaseTrainLogger "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("BaseTrainLogger")]),t._v(" ()"),t._v("\n")]),t._v("\n")]),t._v(" "),a("p",[t._v("Base train logger for pipeline training")]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[t._v("allennlp.training.trainer.EpochCallback")]),t._v(" "),a("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),a("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"subclasses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subclasses"}},[t._v("#")]),t._v(" Subclasses")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("a",{attrs:{title:"biome.text.loggers.MlflowLogger",href:"#biome.text.loggers.MlflowLogger"}},[t._v("MlflowLogger")])])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"init-train"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-train"}},[t._v("#")]),t._v(" init_train "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("init_train")]),t._v(" ("),t._v("\n  self,\n  pipeline: Pipeline,\n  trainer_configuration: TrainerConfiguration,\n  training: Union[allennlp.data.dataset_readers.dataset_reader.AllennlpDataset, allennlp.data.dataset_readers.dataset_reader.AllennlpLazyDataset],\n  validation: Union[allennlp.data.dataset_readers.dataset_reader.AllennlpDataset, allennlp.data.dataset_readers.dataset_reader.AllennlpLazyDataset, NoneType] = None,\n  test: Union[allennlp.data.dataset_readers.dataset_reader.AllennlpDataset, allennlp.data.dataset_readers.dataset_reader.AllennlpLazyDataset, NoneType] = None,\n) \n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Init train logging")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("p",[t._v("pipeline:\nThe training pipeline\ntrainer_configuration:\nThe trainer configuration\ntraining:\nTraining dataset\nvalidation:\nValidation dataset\ntest:\nTest dataset")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"end-train"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#end-train"}},[t._v("#")]),t._v(" end_train "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("end_train")]),t._v(" ("),t._v("\n  self,\n  results: "),a("a",{attrs:{title:"biome.text.training_results.TrainingResults",href:"training_results.html#biome.text.training_results.TrainingResults"}},[t._v("TrainingResults")]),t._v(",\n) \n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("End train logging")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("p",[t._v("results:\nThe training result set")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"log-epoch-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log-epoch-metrics"}},[t._v("#")]),t._v(" log_epoch_metrics "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("log_epoch_metrics")]),t._v(" ("),t._v("\n  self,\n  epoch: int,\n  metrics: Dict[str, Any],\n) \n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Log epoch metrics")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("p",[t._v("epoch:\nThe current epoch\nmetrics:\nThe metrics related to current epoch")])])]),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"mlflowlogger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mlflowlogger"}},[t._v("#")]),t._v(" MlflowLogger "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("MlflowLogger")]),t._v(" (experiment_name: str = None, artifact_location: str = None)"),t._v("\n")]),t._v("\n")]),t._v(" "),a("p",[t._v("A common mlflow logger for pipeline training")]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-2"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("a",{attrs:{title:"biome.text.loggers.BaseTrainLogger",href:"#biome.text.loggers.BaseTrainLogger"}},[t._v("BaseTrainLogger")])]),t._v(" "),a("li",[t._v("allennlp.training.trainer.EpochCallback")]),t._v(" "),a("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),a("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"inherited-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members"}},[t._v("#")]),t._v(" Inherited members")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("b",[a("a",{attrs:{title:"biome.text.loggers.BaseTrainLogger",href:"#biome.text.loggers.BaseTrainLogger"}},[t._v("BaseTrainLogger")])])]),t._v(":\n"),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("a",{attrs:{title:"biome.text.loggers.BaseTrainLogger.end_train",href:"#biome.text.loggers.BaseTrainLogger.end_train"}},[t._v("end_train")])])]),t._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.loggers.BaseTrainLogger.init_train",href:"#biome.text.loggers.BaseTrainLogger.init_train"}},[t._v("init_train")])])]),t._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.loggers.BaseTrainLogger.log_epoch_metrics",href:"#biome.text.loggers.BaseTrainLogger.log_epoch_metrics"}},[t._v("log_epoch_metrics")])])])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);