(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{447:function(e,t,s){"use strict";s.r(t);var a=s(26),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"biome-text-commands-explore-explore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-commands-explore-explore"}},[e._v("#")]),e._v(" biome.text.commands.explore.explore "),s("Badge",{attrs:{text:"Module"}})],1),e._v(" "),s("dl",[s("h3",{attrs:{id:"biome.text.commands.explore.explore.explore_with_args"}},[e._v("explore_with_args "),s("Badge",{attrs:{text:"Function"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("explore_with_args")]),e._v("("),s("span",[e._v("args: argparse.Namespace) -> NoneType")]),e._v("\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"})]),e._v(" "),s("h3",{attrs:{id:"biome.text.commands.explore.explore.explore"}},[e._v("explore "),s("Badge",{attrs:{text:"Function"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("explore")]),e._v(" ("),e._v("\n   binary: str,\n   source_path: str,\n   es_host: str,\n   es_index: str,\n   batch_size: int = 500,\n   prediction_cache_size: int = 0,\n   interpret: bool = False,\n   force_delete: bool = True,\n   **prediction_metadata,\n)  -> NoneType\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"})]),e._v(" "),s("h3",{attrs:{id:"biome.text.commands.explore.explore.register_biome_prediction"}},[e._v("register_biome_prediction "),s("Badge",{attrs:{text:"Function"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("register_biome_prediction")]),e._v(" ("),e._v("\n   name: str,\n   created_index: str,\n   es_hosts: str,\n   pipeline: "),s("a",{attrs:{title:"biome.text.pipelines.pipeline.Pipeline",href:"../../pipelines/pipeline.html#biome.text.pipelines.pipeline.Pipeline"}},[e._v("Pipeline")]),e._v(",\n   **extra_args: dict,\n)  -> NoneType\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"})])]),e._v(" "),s("dl",[s("h2",{attrs:{id:"biome.text.commands.explore.explore.BiomeExplore"}},[e._v("BiomeExplore "),s("Badge",{attrs:{text:"Class"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[e._v("    "),s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("class")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("BiomeExplore")]),e._v(" ()"),e._v("\n    ")])])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[e._v("An abstract class representing subcommands for allennlp.run.\nIf you wanted to (for example) create your own custom "),s("code",[e._v("special-evaluate")]),e._v(" command to use like")]),e._v(" "),s("p",[s("code",[e._v("allennlp special-evaluate ...")])]),e._v(" "),s("p",[e._v("you would create a "),s("code",[e._v("Subcommand")]),e._v(" subclass and then pass it as an override to\n:func:"),s("code",[e._v("~allennlp.commands.main")]),e._v(" .")])]),e._v(" "),s("h3",[e._v("Ancestors")]),e._v(" "),s("ul",{staticClass:"hlist"},[s("li",[e._v("allennlp.commands.subcommand.Subcommand")])]),e._v(" "),s("dl",[s("h3",{attrs:{id:"biome.text.commands.explore.explore.BiomeExplore.add_subparser"}},[e._v("add_subparser "),s("Badge",{attrs:{text:"Method"}})],1),e._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[e._v("\n"),s("span",{staticClass:"token keyword"},[e._v("def")]),e._v(" "),s("span",{staticClass:"ident"},[e._v("add_subparser")]),e._v(" ("),e._v("\n   self,\n   name: str,\n   parser: argparse._SubParsersAction,\n)  -> argparse.ArgumentParser\n")]),e._v("\n        ")])])]),e._v(" "),s("dd",[s("div",{staticClass:"desc"})])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);