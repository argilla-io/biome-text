(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{390:function(t,s,a){"use strict";a.r(s);var e=a(26),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"biome-text-modules-heads-defs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-defs"}},[t._v("#")]),t._v(" biome.text.modules.heads.defs "),a("Badge",{attrs:{text:"Module"}})],1),t._v(" "),a("div"),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"taskoutput"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskoutput"}},[t._v("#")]),t._v(" TaskOutput "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[t._v("            "),a("code",[t._v("\n              "),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("TaskOutput")]),t._v(" ("),t._v("\n                  "),a("span",[t._v("logits: torch.Tensor")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("probs: torch.Tensor")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("loss: Union[torch.Tensor, NoneType] = None")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("**extra_data")]),a("span",[t._v(",")]),t._v("\n              "),a("span",[t._v(")")]),t._v("\n            ")]),t._v("\n          ")]),t._v(" "),a("p",[t._v("Task output data class")]),t._v(" "),a("p",[t._v("A task output will contains almost the logits and probs properties")]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"as-dict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as-dict"}},[t._v("#")]),t._v(" as_dict "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("as_dict")]),t._v("("),a("span",[t._v("self) -> Dict[str, torch.Tensor]")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Dict reprentation of task output")])])]),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"taskname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskname"}},[t._v("#")]),t._v(" TaskName "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[t._v("            "),a("code",[t._v("\n              "),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("TaskName")]),t._v(" ("),t._v("\n                  "),a("span",[t._v("value")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("names=None")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("*")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("module=None")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("qualname=None")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("type=None")]),a("span",[t._v(",")]),t._v("\n                  "),a("span",[t._v("start=1")]),a("span",[t._v(",")]),t._v("\n              "),a("span",[t._v(")")]),t._v("\n            ")]),t._v("\n          ")]),t._v(" "),a("p",[t._v("The task name enum structure")]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[t._v("enum.Enum")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"class-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-variables"}},[t._v("#")]),t._v(" Class variables")]),t._v("\n")]),t._v(" "),a("dl",[a("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.none"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("none")])])]),t._v(" "),a("dd"),t._v(" "),a("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.text_classification"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("text_classification")])])]),t._v(" "),a("dd"),t._v(" "),a("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.token_classification"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("token_classification")])])]),t._v(" "),a("dd"),t._v(" "),a("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskName.language_modelling"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("language_modelling")])])]),t._v(" "),a("dd")]),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"taskhead"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskhead"}},[t._v("#")]),t._v(" TaskHead "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[t._v("            "),a("code",[t._v("\n              "),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("TaskHead")]),t._v(" (backbone: "),a("a",{attrs:{title:"biome.text.backbone.BackboneEncoder",href:"../../backbone.html#biome.text.backbone.BackboneEncoder"}},[t._v("BackboneEncoder")]),t._v(")"),t._v("\n            ")]),t._v("\n          ")]),t._v(" "),a("p",[t._v("Base task head class")]),t._v(" "),a("p",[t._v("Initializes internal Module state, shared by both nn.Module and ScriptModule.")]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-2"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[t._v("torch.nn.modules.module.Module")]),t._v(" "),a("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),a("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"subclasses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subclasses"}},[t._v("#")]),t._v(" Subclasses")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("a",{attrs:{title:"biome.text.modules.heads.classification.defs.ClassificationHead",href:"classification/defs.html#biome.text.modules.heads.classification.defs.ClassificationHead"}},[t._v("ClassificationHead")])]),t._v(" "),a("li",[a("a",{attrs:{title:"biome.text.modules.heads.language_modelling.LanguageModelling",href:"language_modelling.html#biome.text.modules.heads.language_modelling.LanguageModelling"}},[t._v("LanguageModelling")])]),t._v(" "),a("li",[a("a",{attrs:{title:"biome.text.modules.heads.token_classification.TokenClassification",href:"token_classification.html#biome.text.modules.heads.token_classification.TokenClassification"}},[t._v("TokenClassification")])])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register"}},[t._v("#")]),t._v(" register "),a("Badge",{attrs:{text:"Static method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("register")]),t._v(" ("),t._v("\n            overrides: bool = False,\n            **kwargs,\n          ) \n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Enables the task head component for pipeline loading")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"instance-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables"}},[t._v("#")]),t._v(" Instance variables")]),t._v("\n")]),t._v(" "),a("dl",[a("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.labels"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("labels")]),t._v(" : List[str]")])]),t._v(" "),a("dd",[a("p",[t._v("The configured vocab labels")])]),t._v(" "),a("dt",{attrs:{id:"biome.text.modules.heads.defs.TaskHead.num_labels"}},[a("code",{staticClass:"name"},[t._v("var "),a("span",{staticClass:"ident"},[t._v("num_labels")])])]),t._v(" "),a("dd",[a("p",[t._v("The number of vocab labels")])])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"extend-labels"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extend-labels"}},[t._v("#")]),t._v(" extend_labels "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("extend_labels")]),t._v(" ("),t._v("\n            self,\n            labels: List[str],\n          ) \n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Extends the number of labels")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"task-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-name"}},[t._v("#")]),t._v(" task_name "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("task_name")]),t._v("("),a("span",[t._v("self) -> "),a("a",{attrs:{title:"biome.text.modules.heads.defs.TaskName",href:"#biome.text.modules.heads.defs.TaskName"}},[t._v("TaskName")])]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("The task head name")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"inputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[t._v("#")]),t._v(" inputs "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("inputs")]),t._v("("),a("span",[t._v("self) -> Union[List[str], NoneType]")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("The expected inputs names for data featuring. If no defined,\nwill be automatically calculated from featurize signature")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"forward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forward"}},[t._v("#")]),t._v(" forward "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("forward")]),t._v(" ("),t._v("\n            self,\n            *args: Any,\n            **kwargs: Any,\n          )  -> "),a("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[t._v("TaskOutput")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Defines the computation performed at every call.")]),t._v(" "),a("p",[t._v("Should be overridden by all subclasses.")]),t._v(" "),a("div",{staticClass:"admonition note"},[a("p",{staticClass:"admonition-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("Although the recipe for forward pass needs to be defined within\nthis function, one should call the :class:"),a("code",[t._v("Module")]),t._v(" instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-metrics"}},[t._v("#")]),t._v(" get_metrics "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_metrics")]),t._v(" ("),t._v("\n            self,\n            reset: bool = False,\n          )  -> Dict[str, float]\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Metrics dictionary for training task")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"featurize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#featurize"}},[t._v("#")]),t._v(" featurize "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("featurize")]),t._v(" ("),t._v("\n            self,\n            *args,\n            **kwargs,\n          )  -> Union[allennlp.data.instance.Instance, NoneType]\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Converts incoming data into an allennlp "),a("code",[t._v("Instance")]),t._v(", used for pyTorch tensors generation")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"process-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-output"}},[t._v("#")]),t._v(" process_output "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("process_output")]),t._v(" ("),t._v("\n            self,\n            output: "),a("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[t._v("TaskOutput")]),t._v(",\n          )  -> "),a("a",{attrs:{title:"biome.text.modules.heads.defs.TaskOutput",href:"#biome.text.modules.heads.defs.TaskOutput"}},[t._v("TaskOutput")]),t._v("\n          ")]),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Build extra parameters over basic task output")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"prediction-explain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prediction-explain"}},[t._v("#")]),t._v(" prediction_explain "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[t._v("          "),a("code",[t._v("\n          "),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("prediction_explain")]),t._v(" ("),t._v("\n            self,\n            prediction: Dict[str, "),a("built-in",{attrs:{function:"",array:""}},[t._v("],\n            instance: allennlp.data.instance.Instance,\n          )  -> Dict[str, Any]\n          ")])],1),t._v("\n        ")])])]),t._v(" "),a("dd",[a("p",[t._v("Adds embedding explanations information to prediction output")])])]),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"taskheadspec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taskheadspec"}},[t._v("#")]),t._v(" TaskHeadSpec "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[t._v("            "),a("code",[t._v("\n              "),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("TaskHeadSpec")]),t._v(" (*args, **kwds)"),t._v("\n            ")]),t._v("\n          ")]),t._v(" "),a("p",[t._v("Layer spec for TaskHead components")]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"ancestors-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-3"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec"}},[t._v("ComponentSpec")])]),t._v(" "),a("li",[t._v("typing.Generic")]),t._v(" "),a("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"inherited-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members"}},[t._v("#")]),t._v(" Inherited members")]),t._v("\n")]),t._v(" "),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("b",[a("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec"}},[t._v("ComponentSpec")])])]),t._v(":\n"),a("ul",{staticClass:"hlist"},[a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.compile",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.compile"}},[t._v("compile")])])]),t._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.config",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.config"}},[t._v("config")])])]),t._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.from_params",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.from_params"}},[t._v("from_params")])])]),t._v(" "),a("li",[a("code",[a("a",{attrs:{title:"biome.text.modules.specs.defs.ComponentSpec.input_dim",href:"../specs/defs.html#biome.text.modules.specs.defs.ComponentSpec.input_dim"}},[t._v("input_dim")])])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);