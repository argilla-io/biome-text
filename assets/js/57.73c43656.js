(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{446:function(a,t,s){"use strict";s.r(t);var e=s(18),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"biome-text-commands-ui-ui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-commands-ui-ui"}},[a._v("#")]),a._v(" biome.text.commands.ui.ui "),s("Badge",{attrs:{text:"Module"}})],1),a._v(" "),s("dl",[s("h3",{attrs:{id:"biome.text.commands.ui.ui.launch_ui_from_args"}},[a._v("launch_ui_from_args "),s("Badge",{attrs:{text:"Function"}})],1),a._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[a._v("\n"),s("span",{staticClass:"token keyword"},[a._v("def")]),a._v(" "),s("span",{staticClass:"ident"},[a._v("launch_ui_from_args")]),a._v("("),s("span",[a._v("args: argparse.Namespace) -> NoneType")]),a._v("\n")]),a._v("\n        ")])])]),a._v(" "),s("dd",[s("div",{staticClass:"desc"})]),a._v(" "),s("h3",{attrs:{id:"biome.text.commands.ui.ui.launch_ui"}},[a._v("launch_ui "),s("Badge",{attrs:{text:"Function"}})],1),a._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[a._v("\n"),s("span",{staticClass:"token keyword"},[a._v("def")]),a._v(" "),s("span",{staticClass:"ident"},[a._v("launch_ui")]),a._v(" ("),a._v("\n   es_host: str,\n   port: int = 9000,\n)  -> NoneType\n")]),a._v("\n        ")])])]),a._v(" "),s("dd",[s("div",{staticClass:"desc"})]),a._v(" "),s("h3",{attrs:{id:"biome.text.commands.ui.ui.temporal_static_path"}},[a._v("temporal_static_path "),s("Badge",{attrs:{text:"Function"}})],1),a._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[a._v("\n"),s("span",{staticClass:"token keyword"},[a._v("def")]),a._v(" "),s("span",{staticClass:"ident"},[a._v("temporal_static_path")]),a._v(" ("),a._v("\n   explore_view: str,\n   basedir: Union[str, NoneType] = None,\n) \n")]),a._v("\n        ")])])]),a._v(" "),s("dd",[s("div",{staticClass:"desc"})])]),a._v(" "),s("dl",[s("h2",{attrs:{id:"biome.text.commands.ui.ui.BiomeUI"}},[a._v("BiomeUI "),s("Badge",{attrs:{text:"Class"}})],1),a._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[a._v("    "),s("code",[a._v("\n"),s("span",{staticClass:"token keyword"},[a._v("class")]),a._v(" "),s("span",{staticClass:"ident"},[a._v("BiomeUI")]),a._v(" ()"),a._v("\n    ")])])])]),a._v(" "),s("dd",[s("div",{staticClass:"desc"},[s("p",[a._v("An abstract class representing subcommands for allennlp.run.\nIf you wanted to (for example) create your own custom "),s("code",[a._v("special-evaluate")]),a._v(" command to use like")]),a._v(" "),s("p",[s("code",[a._v("allennlp special-evaluate ...")])]),a._v(" "),s("p",[a._v("you would create a "),s("code",[a._v("Subcommand")]),a._v(" subclass and then pass it as an override to\n:func:"),s("code",[a._v("~allennlp.commands.main")]),a._v(" .")])]),a._v(" "),s("h3",[a._v("Ancestors")]),a._v(" "),s("ul",{staticClass:"hlist"},[s("li",[a._v("allennlp.commands.subcommand.Subcommand")])]),a._v(" "),s("dl",[s("h3",{attrs:{id:"biome.text.commands.ui.ui.BiomeUI.add_subparser"}},[a._v("add_subparser "),s("Badge",{attrs:{text:"Method"}})],1),a._v(" "),s("dt",[s("div",{staticClass:"language-python extra-class"},[s("pre",{staticClass:"language-python"},[s("code",[a._v("\n"),s("span",{staticClass:"token keyword"},[a._v("def")]),a._v(" "),s("span",{staticClass:"ident"},[a._v("add_subparser")]),a._v(" ("),a._v("\n   self,\n   name: str,\n   parser: argparse._SubParsersAction,\n)  -> argparse.ArgumentParser\n")]),a._v("\n        ")])])]),a._v(" "),s("dd",[s("div",{staticClass:"desc"})])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);