(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{471:function(t,a,e){"use strict";e.r(a);var s=e(26),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"training-a-sequence-tagger-for-slot-filling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#training-a-sequence-tagger-for-slot-filling"}},[t._v("#")]),t._v(" Training a sequence tagger for Slot Filling")]),t._v(" "),e("p",[e("a",{attrs:{target:"_blank",href:"https://www.recogn.ai/biome-text/v1.0.0/documentation/tutorials/Training_a_sequence_tagger_for_Slot_Filling.html"}},[e("img",{staticClass:"icon",attrs:{src:"https://www.recogn.ai/biome-text/v1.0.0/assets/img/biome-isotype.svg",width:"24"}})]),t._v(" "),e("a",{attrs:{href:"https://www.recogn.ai/biome-text/v1.0.0/documentation/tutorials/Training_a_sequence_tagger_for_Slot_Filling.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("View on recogn.ai"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{target:"_blank",href:"https://colab.research.google.com/github/recognai/biome-text/blob/1.0.0/docs/docs/documentation/tutorials/Training_a_sequence_tagger_for_Slot_Filling.ipynb"}},[e("img",{staticClass:"icon",attrs:{src:"https://www.tensorflow.org/images/colab_logo_32px.png",width:"24"}})]),t._v(" "),e("a",{attrs:{href:"https://colab.research.google.com/github/recognai/biome-text/blob/1.0.0/docs/docs/documentation/tutorials/Training_a_sequence_tagger_for_Slot_Filling.ipynb",target:"_blank",rel:"noopener noreferrer"}},[t._v("Run in Google Colab"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{target:"_blank",href:"https://github.com/recognai/biome-text/blob/1.0.0/docs/docs/documentation/tutorials/Training_a_sequence_tagger_for_Slot_Filling.ipynb"}},[e("img",{staticClass:"icon",attrs:{src:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",width:"24"}})]),t._v(" "),e("a",{attrs:{href:"https://github.com/recognai/biome-text/blob/1.0.0/docs/docs/documentation/tutorials/Training_a_sequence_tagger_for_Slot_Filling.ipynb",target:"_blank",rel:"noopener noreferrer"}},[t._v("View source on GitHub"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("In this tutorial we will train a sequence tagger for filling slots in spoken requests.\nThe goal is to look for specific pieces of information in the request and tag the corresponding tokens accordingly.\nThe requests will include several intents, from getting weather information to adding a song to a playlist, each requiring its own set of slots.\nTherefore, slot filling often goes hand in hand with intent classification.\nIn this tutorial, however, we will only focus on the slot filling task.")]),t._v(" "),e("p",[t._v("Slot filling is closely related to "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Named-entity_recognition",target:"_blank",rel:"noopener noreferrer"}},[t._v("Named-entity recognition (NER)"),e("OutboundLink")],1),t._v(" and the model of this tutorial can also be used to train a NER system.")]),t._v(" "),e("p",[t._v("In this tutorial we will use the "),e("a",{attrs:{href:"https://github.com/snipsco/nlu-benchmark/tree/master/2017-06-custom-intent-engines",target:"_blank",rel:"noopener noreferrer"}},[t._v("SNIPS data set"),e("OutboundLink")],1),t._v(" adapted by "),e("a",{attrs:{href:"https://github.com/sz128/slot_filling_and_intent_detection_of_SLU/tree/master/data/snips",target:"_blank",rel:"noopener noreferrer"}},[t._v("Su Zhu"),e("OutboundLink")],1),t._v(" and our simple "),e("a",{attrs:{href:"https://biome-tutorials-data.s3-eu-west-1.amazonaws.com/token_classifier/data_prep.ipynb",target:"_blank",rel:"noopener noreferrer"}},[t._v("data preparation notebook"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("When running this tutorial in Google Colab, make sure to install "),e("em",[t._v("biome.text")]),t._v(" first:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("!pip install "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("U biome"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("text\n")])])]),e("p",[t._v("Ignore warnings and don't forget to restart your runtime afterwards ("),e("em",[t._v("Runtime -> Restart runtime")]),t._v(").")]),t._v(" "),e("h2",{attrs:{id:"explore-the-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explore-the-data"}},[t._v("#")]),t._v(" Explore the data")]),t._v(" "),e("p",[t._v("Let's take a look at the data before starting with the configuration of our pipeline.\nFor this we create a "),e("code",[t._v("DataSource")]),t._v(" instance providing a path to our data.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" DataSource\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("train_ds "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DataSource"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://biome-tutorials-data.s3-eu-west-1.amazonaws.com/token_classifier/train.json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntrain_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",[e("style",{attrs:{scoped:""}},[t._v('\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\x3c!--beforebegin--\x3e<div class="language- extra-class">\x3c!--afterbegin--\x3e<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e')]),t._v(" "),e("table",{staticClass:"dataframe",attrs:{border:"1"}},[e("thead",[e("tr",{staticStyle:{"text-align":"right"}},[e("th"),t._v(" "),e("th",[t._v("text")]),t._v(" "),e("th",[t._v("labels")]),t._v(" "),e("th",[t._v("intent")]),t._v(" "),e("th",[t._v("path")])])]),t._v(" "),e("tbody",[e("tr",[e("th",[t._v("0")]),t._v(" "),e("td",[t._v("[Find, the, schedule, for, Across, the, Line, ...")]),t._v(" "),e("td",[t._v("[O, O, B-object_type, O, B-movie_name, I-movie...")]),t._v(" "),e("td",[t._v("SearchScreeningEvent")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("1")]),t._v(" "),e("td",[t._v("[play, Party, Ben, on, Slacker]")]),t._v(" "),e("td",[t._v("[O, B-artist, I-artist, O, B-service]")]),t._v(" "),e("td",[t._v("PlayMusic")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("2")]),t._v(" "),e("td",[t._v("[play, a, 1988, soundtrack]")]),t._v(" "),e("td",[t._v("[O, O, B-year, B-music_item]")]),t._v(" "),e("td",[t._v("PlayMusic")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("3")]),t._v(" "),e("td",[t._v("[Can, you, play, The, Change, Is, Made, on, Ne...")]),t._v(" "),e("td",[t._v("[O, O, O, B-track, I-track, I-track, I-track, ...")]),t._v(" "),e("td",[t._v("PlayMusic")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("4")]),t._v(" "),e("td",[t._v("[what, is, the, forecast, for, colder, in, Ans...")]),t._v(" "),e("td",[t._v("[O, O, O, O, O, B-condition_temperature, O, B-...")]),t._v(" "),e("td",[t._v("GetWeather")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("5")]),t._v(" "),e("td",[t._v("[What's, the, weather, in, Totowa, WY, one, mi...")]),t._v(" "),e("td",[t._v("[O, O, O, O, B-city, B-state, B-timeRange, I-t...")]),t._v(" "),e("td",[t._v("GetWeather")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("6")]),t._v(" "),e("td",[t._v("[Play, a, tune, from, Space, Mandino, .]")]),t._v(" "),e("td",[t._v("[O, O, B-music_item, O, B-artist, I-artist, O]")]),t._v(" "),e("td",[t._v("PlayMusic")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("7")]),t._v(" "),e("td",[t._v("[give, five, out, of, 6, stars, to, current, e...")]),t._v(" "),e("td",[t._v("[O, B-rating_value, O, O, B-best_rating, B-rat...")]),t._v(" "),e("td",[t._v("RateBook")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("8")]),t._v(" "),e("td",[t._v("[Play, some, chanson, style, music.]")]),t._v(" "),e("td",[t._v("[O, O, B-genre, O, O]")]),t._v(" "),e("td",[t._v("PlayMusic")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])]),t._v(" "),e("tr",[e("th",[t._v("9")]),t._v(" "),e("td",[t._v("[I, would, give, French, Poets, and, Novelists...")]),t._v(" "),e("td",[t._v("[O, O, O, B-object_name, I-object_name, I-obje...")]),t._v(" "),e("td",[t._v("RateBook")]),t._v(" "),e("td",[t._v("https://biome-tutorials-data.s3-eu-west-1.amaz...")])])])])]),t._v(" "),e("p",[t._v("As we can see we have two relevant columns for our task: "),e("em",[t._v("text")]),t._v(" and "),e("em",[t._v("labels")]),t._v(".\nThe "),e("em",[t._v("intent")]),t._v(" column will be ignored in this tutorial.\nThe "),e("em",[t._v("path")]),t._v(" column is added automatically by the "),e("RouterLink",{attrs:{to:"/api/biome/text/data/datasource.html#datasource"}},[t._v("DataSource")]),t._v(" class to keep track of the source file.")],1),t._v(" "),e("p",[t._v("The input already comes pre-tokenized and each token in the "),e("em",[t._v("text")]),t._v(" column has a label/tag in the "),e("em",[t._v("labels")]),t._v(" column, this means that both list always have the same length.\nThe labels are given in the "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inside%E2%80%93outside%E2%80%93beginning_(tagging)",target:"_blank",rel:"noopener noreferrer"}},[t._v("BIO tagging scheme"),e("OutboundLink")],1),t._v(", which is widely used in Slot Filling/NER systems.")]),t._v(" "),e("p",[t._v("When specifying the "),e("RouterLink",{attrs:{to:"/api/biome/text/modules/heads/token_classification.html#tokenclassification"}},[t._v("TokenClassification")]),t._v(" head (see "),e("a",{attrs:{href:"#Configure-your-biome.text-Pipeline"}},[t._v("below")]),t._v("), the tokenization step in the pipeline is automatically disabled and the input is expected to be a list of tokens.")],1),t._v(" "),e("p",[t._v("The "),e("RouterLink",{attrs:{to:"/api/biome/text/data/datasource.html#datasource"}},[t._v("DataSource")]),t._v(" class stores the data in an underlying "),e("a",{attrs:{href:"https://docs.dask.org/en/latest/dataframe.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dask DataFrame"),e("OutboundLink")],1),t._v(" that you can easily access.\nFor example, let's check the size of our training data:")],1),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("train_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_dataframe"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("13084\n")])])]),e("p",[t._v("Or let's check how many different labels/tags we have:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("df "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" train_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_dataframe"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compute"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlabels_total "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("labels"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labels_total"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("72\n")])])]),e("p",[t._v("and how they are distributed:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\npd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Series"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labels_total"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value_counts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("O                               59610\nI-object_name                    7400\nI-playlist                       3230\nB-object_type                    3023\nB-object_name                    2778\n                                ...  \nI-cuisine                          28\nI-facility                         14\nI-object_part_of_series_type        3\nI-object_select                     3\nI-playlist_owner                    1\nLength: 72, dtype: int64\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Tip")]),t._v(" "),e("p",[t._v("The "),e("RouterLink",{attrs:{to:"/api/biome/text/modules/heads/task_head.html#taskhead"}},[t._v("TaskHead")]),t._v(" of our model (the "),e("RouterLink",{attrs:{to:"/api/biome/text/modules/heads/token_classification.html#tokenclassification"}},[t._v("TokenClassification")]),t._v(") will expect a "),e("em",[t._v("text")]),t._v(" and a "),e("em",[t._v("labels")]),t._v(" column to be present in the dataframe.\nSince they are already present, there is no need for a "),e("code",[t._v("mapping")]),t._v(" in the "),e("RouterLink",{attrs:{to:"/api/biome/text/data/datasource.html#datasource"}},[t._v("DataSource")]),t._v(".")],1)]),t._v(" "),e("h2",{attrs:{id:"configure-your-biome-text-pipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configure-your-biome-text-pipeline"}},[t._v("#")]),t._v(" Configure your "),e("em",[t._v("biome.text")]),t._v(" Pipeline")]),t._v(" "),e("p",[t._v("A typical "),e("RouterLink",{attrs:{to:"/api/biome/text/pipeline.html#pipeline"}},[t._v("Pipeline")]),t._v(" consists of tokenizing the input, extracting features, applying a language encoding (optionally) and executing a task-specific head in the end.\nAfter training a pipeline, you can use it to make predictions or explore the underlying model via the "),e("RouterLink",{attrs:{to:"/documentation/user-guides/02.explore.html"}},[t._v("explore UI")]),t._v(".")],1),t._v(" "),e("p",[t._v("A "),e("em",[t._v("biome.text")]),t._v(" pipeline has the following main components:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a descriptive name of your pipeline")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tokenizer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# how to tokenize the input")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("features")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# input features of the model")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("encoder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the language encoder")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("head")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# your task configuration")]),t._v("\n\n")])])]),e("p",[t._v("See the "),e("RouterLink",{attrs:{to:"/documentation/user-guides/05.configuration.html"}},[t._v("Configuration section")]),t._v(" for a detailed description of how these main components can be configured.")],1),t._v(" "),e("p",[t._v("In this tutorial we will create a "),e("RouterLink",{attrs:{to:"/api/biome/text/configuration.html#pipelineconfiguration"}},[t._v("PipelineConfiguration")]),t._v(" programmatically, and use it to initialize the "),e("RouterLink",{attrs:{to:"/api/biome/text/pipeline.html#pipeline"}},[t._v("Pipeline")]),t._v(".\nYou can also create your pipelines by providing a "),e("RouterLink",{attrs:{to:"/api/biome/text/pipeline.html#from-config"}},[t._v("python dictionary")]),t._v(" (see the text classification "),e("RouterLink",{attrs:{to:"/documentation/tutorials/Training_a_text_classifier.html"}},[t._v("tutorial")]),t._v("), a YAML "),e("RouterLink",{attrs:{to:"/api/biome/text/pipeline.html#from-yaml"}},[t._v("configuration file")]),t._v(" or a "),e("RouterLink",{attrs:{to:"/api/biome/text/pipeline.html#from-pretrained"}},[t._v("pretrained model")]),t._v(".")],1),t._v(" "),e("p",[t._v("A pipeline configuration is composed of several other "),e("RouterLink",{attrs:{to:"/api/biome/text/configuration.html#biome-text-configuration"}},[t._v("configuration classes")]),t._v(", each one corresponding to one of the main components.")],1),t._v(" "),e("h3",{attrs:{id:"features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),e("p",[t._v("Let us first configure the features of our pipeline.\nFor our "),e("code",[t._v("word")]),t._v(" feature we will use pretrained embeddings from "),e("a",{attrs:{href:"https://fasttext.cc/docs/en/english-vectors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("fasttext"),e("OutboundLink")],1),t._v(", and our "),e("code",[t._v("char")]),t._v(" feature will use the last hidden state of a "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Gated_recurrent_unit",target:"_blank",rel:"noopener noreferrer"}},[t._v("GRU"),e("OutboundLink")],1),t._v(" encoder to represent a word based on its characters.\nKeep in mind that the "),e("code",[t._v("embedding_dim")]),t._v(" parameter for the "),e("code",[t._v("word")]),t._v(" feature must be equal to the dimensions of the pretrained embeddings!")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Tip")]),t._v(" "),e("p",[t._v("If you do not provide any feature configurations, we will choose a very basic "),e("code",[t._v("word")]),t._v(" feature by default.")])]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configuration "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" FeaturesConfiguration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WordFeatures"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CharFeatures\n\nword_feature "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" WordFeatures"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    embedding_dim"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    weights_file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://dl.fbaipublicfiles.com/fasttext/vectors-english/wiki-news-300d-1M.vec.zip"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nchar_feature "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CharFeatures"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    embedding_dim"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    encoder"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gru"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bidirectional"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num_layers"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hidden_size"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    dropout"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfeatures_config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FeaturesConfiguration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    word"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("word_feature"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    char"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("char_feature\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"encoder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#encoder"}},[t._v("#")]),t._v(" Encoder")]),t._v(" "),e("p",[t._v("Next we will configure our encoder that takes as input a sequence of embedded word vectors and returns a sequence of encoded word vectors.\nFor this encoding we will use another larger GRU:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configuration "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Seq2SeqEncoderConfiguration\n\nencoder_config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Seq2SeqEncoderConfiguration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gru"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bidirectional"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    num_layers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    hidden_size"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" Head")]),t._v(" "),e("p",[t._v("The final configuration belongs to our "),e("RouterLink",{attrs:{to:"/api/biome/text/modules/heads/task_head.html#taskhead"}},[t._v("TaskHead")]),t._v(".\nIt reflects the task our problem belongs to and can be easily exchanged with other types of heads keeping the same features and encoder.")],1),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Tip")]),t._v(" "),e("p",[t._v("Exchanging the heads you can easily pretrain a model on a certain task, such as "),e("RouterLink",{attrs:{to:"/api/biome/text/modules/heads/language_modelling.html#languagemodelling"}},[t._v("language modelling")]),t._v(", and use its pretrained features and encoder for training the model on another task.")],1)]),t._v(" "),e("p",[t._v("For our task we will use a "),e("RouterLink",{attrs:{to:"/api/biome/text/modules/heads/token_classification.html#tokenclassification"}},[t._v("TokenClassification")]),t._v(" head that allows us to tag each token individually:")],1),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("heads "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" TokenClassificationConfiguration\n\nhead_config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TokenClassificationConfiguration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    labels"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labels_total"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    label_encoding"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BIO"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    feedforward"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num_layers"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hidden_dims"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"activations"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"relu"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dropout"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"pipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pipeline"}},[t._v("#")]),t._v(" Pipeline")]),t._v(" "),e("p",[t._v("Now we can create a "),e("RouterLink",{attrs:{to:"/api/biome/text/configuration.html#pipelineconfiguration"}},[t._v("PipelineConfiguration")]),t._v(" and finally initialize our "),e("RouterLink",{attrs:{to:"/api/biome/text/pipeline.html#pipeline"}},[t._v("Pipeline")]),t._v(".")],1),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configuration "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PipelineConfiguration\n\npipeline_config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PipelineConfiguration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"slot_filling_tutorial"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    features"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("features_config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    encoder"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("encoder_config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("head_config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Pipeline\n\npl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pipeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from_config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pipeline_config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"create-a-vocabulary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-vocabulary"}},[t._v("#")]),t._v(" Create a vocabulary")]),t._v(" "),e("p",[t._v("Before we can start the training we need to create the vocabulary for our model.\nFor this we define a "),e("code",[t._v("VocabularyConfiguration")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" biome"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" VocabularyConfiguration\n")])])]),e("p",[t._v("Since we use pretrained word embeddings we will also consider the validation data when creating the vocabulary.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("valid_ds "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DataSource"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://biome-tutorials-data.s3-eu-west-1.amazonaws.com/token_classifier/valid.json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("We also get rid of the rarest words by adding the "),e("code",[t._v("min_count")]),t._v(" argument and set it to 2 for the word feature vocabulary.\nFor a complete list of available arguments see the "),e("RouterLink",{attrs:{to:"/api/biome/text/configuration.html#vocabularyconfiguration"}},[t._v("VocabularyConfiguration API")]),t._v(".")],1),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("vocab_config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" VocabularyConfiguration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    sources"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("train_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valid_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    min_count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"word"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("We then pass this configuration to our "),e("code",[t._v("Pipeline")]),t._v(" to create the vocabulary.\nApart from the loading bar of building the vocabulary, there will be two more loading bars corresponding to the "),e("code",[t._v("weights_file")]),t._v(" provided in the word feature:")]),t._v(" "),e("ul",[e("li",[t._v("the progress of downloading the file (this file will be cached)")]),t._v(" "),e("li",[t._v("the progress loading the weights from the file")])]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("pl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_vocabulary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vocab_config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))\n\n\n\n\n\n\nHBox(children=(FloatProgress(value=0.0, max=999994.0), HTML(value='')))\n")])])]),e("p",[t._v("After creating the vovocab_configbulary we can check the size of our entire model in terms of trainable parameters:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("pl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trainable_parameters\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1989112\n")])])]),e("h2",{attrs:{id:"train-your-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#train-your-model"}},[t._v("#")]),t._v(" Train your model")]),t._v(" "),e("p",[t._v("Now we have everything ready to start the training of our model:")]),t._v(" "),e("ul",[e("li",[t._v("training data set")]),t._v(" "),e("li",[t._v("vocabulary")])]),t._v(" "),e("p",[t._v("As "),e("code",[t._v("trainer")]),t._v(" we will use the default configuration that has sensible values and works alright for our experiment.\n"),e("RouterLink",{attrs:{to:"/documentation/tutorials/Training_a_text_classifier.html#configure-the-trainer"}},[t._v("This tutorial")]),t._v(" shows you an example of how to configure a trainer.")],1),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Tip")]),t._v(" "),e("p",[t._v("If you want to tune the trainer or use a cuda device, you can pass a "),e("code",[t._v("trainer = TrainerConfiguration(cuda_device=0, ...)")]),t._v(" to the "),e("code",[t._v("Pipeline.train()")]),t._v(" method.\nSee the "),e("RouterLink",{attrs:{to:"/api/biome/text/configuration.html#trainerconfiguration"}},[t._v("TrainerConfiguration API")]),t._v(" for a complete list of available configurations.")],1)]),t._v(" "),e("p",[t._v("Apart from the validation data source to estimate the generalization error, we will also pass in a test data set in case we want to do some Hyperparameter optimization and compare different encoder architectures in the end.\nFor this we will create another "),e("code",[t._v("DataSource")]),t._v(" pointing to our test data.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("test_ds "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DataSource"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://biome-tutorials-data.s3-eu-west-1.amazonaws.com/token_classifier/test.json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The training output will be saved in a folder specified by the "),e("code",[t._v("output")]),t._v(" argument of the "),e("code",[t._v("train")]),t._v(" method.\nIt will contain the trained model weights and the metrics, as well as the vocabulary and a "),e("em",[t._v("log")]),t._v(" folder for visualizing the training process with "),e("a",{attrs:{href:"https://www.tensorflow.org/tensorboard/",target:"_blank",rel:"noopener noreferrer"}},[t._v("tensorboard"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("When the training has finished it will automatically make a pass over the test data with the best weights to gather the test metrics.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("pl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("train"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    training"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("train_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    validation"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("valid_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    test"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("test_ds"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The model above achieves an overall F1 score of around "),e("strong",[t._v("0.95")]),t._v(", which is not bad when compared to "),e("a",{attrs:{href:"https://nlpprogress.com/english/intent_detection_slot_filling.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("published results"),e("OutboundLink")],1),t._v(" of the same data set.\nYou could continue the experiment changing the encoder to an LSTM network, try out a transformer architecture or fine tune the trainer.\nBut for now we will go on and make our first predictions with this trained model.")]),t._v(" "),e("h2",{attrs:{id:"make-your-first-predictions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#make-your-first-predictions"}},[t._v("#")]),t._v(" Make your first predictions")]),t._v(" "),e("p",[t._v("Now that we trained our model we can go on to make our first predictions.\nFirst we must load our trained model into a new "),e("code",[t._v("Pipeline")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("pl_trained "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pipeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("from_pretrained"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output/model.tar.gz"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("We then provide the input expected by our "),e("code",[t._v("TaskHead")]),t._v(" of the model to the "),e("code",[t._v("Pipeline.predict()")]),t._v(" method.\nIn our case it is a "),e("code",[t._v("TokenClassification")]),t._v(" head that classifies a "),e("code",[t._v("text")]),t._v(" input. "),e("strong",[t._v("Remember that the input has to be pre-tokenized!")])]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("text "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"can you play biome text by backstreet recognais on Spotify"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nprediction "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pl_trained"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("predict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("zip")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prediction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tags"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("[('can', 'O'),\n ('you', 'O'),\n ('play', 'O'),\n ('biome', 'B-track'),\n ('text', 'I-track'),\n ('by', 'O'),\n ('backstreet', 'B-artist'),\n ('recognais', 'I-artist'),\n ('on', 'O'),\n ('Spotify', 'B-service')]\n")])])]),e("p",[t._v("Apart from the most likely "),e("em",[t._v("tags")]),t._v(", the "),e("code",[t._v("prediction")]),t._v(" dictionary contains the "),e("em",[t._v("logits")]),t._v(" and "),e("em",[t._v("probs")]),t._v(" of each of the label for each of the input token.")])])}),[],!1,null,null,null);a.default=n.exports}}]);
