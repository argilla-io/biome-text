(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{443:function(t,e,a){"use strict";a.r(e);var s=a(26),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"biome-text-helpers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-helpers"}},[t._v("#")]),t._v(" biome.text.helpers "),a("Badge",{attrs:{text:"Module"}})],1),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"yaml-to-dict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yaml-to-dict"}},[t._v("#")]),t._v(" yaml_to_dict "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("yaml_to_dict")]),t._v("("),a("span",[t._v("filepath: str) -> Dict[str, Any]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Loads a yaml file into a data dictionary")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("filepath")])])]),t._v(" "),a("dd",[t._v("Path to the yaml file")])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("dict")])]),t._v(" "),a("dd",[t._v(" ")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-compatible-doc-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-compatible-doc-type"}},[t._v("#")]),t._v(" get_compatible_doc_type "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_compatible_doc_type")]),t._v("("),a("span",[t._v("client: elasticsearch.client.Elasticsearch) -> str")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Find a compatible name for doc type by checking the cluster info")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("client")])])]),t._v(" "),a("dd",[t._v("The elasticsearch client")])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("name")])]),t._v(" "),a("dd",[t._v("A compatible name for doc type in function of cluster version")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-env-cuda-device"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-env-cuda-device"}},[t._v("#")]),t._v(" get_env_cuda_device "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_env_cuda_device")]),t._v("("),a("span",[t._v(") -> int")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Gets the cuda device from an environment variable.")]),t._v(" "),a("p",[t._v("This is necessary to activate a GPU if available")]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("cuda_device")])]),t._v(" "),a("dd",[t._v("The integer number of the CUDA device")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"update-method-signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-method-signature"}},[t._v("#")]),t._v(" update_method_signature "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("update_method_signature")]),t._v(" ("),t._v("\n  signature: inspect.Signature,\n  to_method: Callable,\n)  -> Callable\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Updates the signature of a method")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("signature")])])]),t._v(" "),a("dd",[t._v("The signature with which to update the method")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("to_method")])])]),t._v(" "),a("dd",[t._v("The method whose signature will be updated")])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("updated_method")])]),t._v(" "),a("dd",[t._v(" ")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"isgeneric"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isgeneric"}},[t._v("#")]),t._v(" isgeneric "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("isgeneric")]),t._v("("),a("span",[t._v("class_type: Type) -> bool")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Checks if a class type is a generic type (List[str] or Union[str, int]")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"is-running-on-notebook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-running-on-notebook"}},[t._v("#")]),t._v(" is_running_on_notebook "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("is_running_on_notebook")]),t._v("("),a("span",[t._v(") -> bool")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Checks if code is running inside a jupyter notebook")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"split-signature-params-by-predicate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split-signature-params-by-predicate"}},[t._v("#")]),t._v(" split_signature_params_by_predicate "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("split_signature_params_by_predicate")]),t._v(" ("),t._v("\n  signature_function: Callable,\n  predicate: Callable,\n)  -> Tuple[List[inspect.Parameter], List[inspect.Parameter]]\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Splits parameters signature by defined boolean predicate function")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"clean-metric-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-metric-name"}},[t._v("#")]),t._v(" clean_metric_name "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("clean_metric_name")]),t._v("("),a("span",[t._v("name: str) -> str")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd"),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-word-tokens-ids-from-text-field-tensors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-word-tokens-ids-from-text-field-tensors"}},[t._v("#")]),t._v(" get_word_tokens_ids_from_text_field_tensors "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_word_tokens_ids_from_text_field_tensors")]),t._v("("),a("span",[t._v("text_field_tensors: Dict[str, Dict[str, torch.Tensor]]) -> Union[torch.Tensor, NoneType]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Given a text field tensor structure, tries to extract word features related tensors")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("text_field_tensors")])])]),t._v(" "),a("dd",[t._v("The incoming record text field tensors dictionary")])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("tensor")])]),t._v(" "),a("dd",[a("code",[t._v("WordFeatures")]),t._v(" related tensors if enable")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-char-tokens-ids-from-text-field-tensors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-char-tokens-ids-from-text-field-tensors"}},[t._v("#")]),t._v(" get_char_tokens_ids_from_text_field_tensors "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_char_tokens_ids_from_text_field_tensors")]),t._v("("),a("span",[t._v("text_field_tensors: Dict[str, Dict[str, torch.Tensor]]) -> Union[torch.Tensor, NoneType]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Given a text field tensor structure, tries to extract character features related tensors")]),t._v(" "),a("p",[t._v("See "),a("code",[t._v("TokenCharactersIndexer.tokens_to_indices")]),t._v(" for more info")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("text_field_tensors")])])]),t._v(" "),a("dd",[t._v("The incoming record text field tensors dictionary")])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("tensor")])]),t._v(" "),a("dd",[a("code",[t._v("CharFeatures")]),t._v(" related tensors if enable")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"save-dict-as-yaml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#save-dict-as-yaml"}},[t._v("#")]),t._v(" save_dict_as_yaml "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("save_dict_as_yaml")]),t._v(" ("),t._v("\n  dictionary: dict,\n  path: str,\n)  -> str\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Save a cfg dict to path as yaml")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("dictionary")])])]),t._v(" "),a("dd",[t._v("Dictionary to be saved")]),t._v(" "),a("dt",[a("strong",[a("code",[t._v("path")])])]),t._v(" "),a("dd",[t._v("Filesystem location where the yaml file will be saved")])]),t._v(" "),a("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),a("dl",[a("dt",[a("code",[t._v("path")])]),t._v(" "),a("dd",[t._v("Location of the yaml file")])])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-full-class-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-full-class-name"}},[t._v("#")]),t._v(" get_full_class_name "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_full_class_name")]),t._v("("),a("span",[t._v("the_class: Type) -> str")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Given a type class return the full qualified class name")])]),t._v(" "),a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"stringify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringify"}},[t._v("#")]),t._v(" stringify "),a("Badge",{attrs:{text:"Function"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("stringify")]),t._v("("),a("span",[t._v("value: Any) -> Any")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),a("dd",[a("p",[t._v("Creates an equivalent data structure representing data values as string")])])])}),[],!1,null,null,null);e.default=n.exports}}]);
