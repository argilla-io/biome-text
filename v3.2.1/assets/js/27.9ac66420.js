(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{435:function(t,e,a){"use strict";a.r(e);var s=a(27),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"biome-text-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-metrics"}},[t._v("#")]),t._v(" biome.text.metrics "),a("Badge",{attrs:{text:"Module"}})],1),t._v(" "),a("div"),t._v(" "),a("div"),t._v(" "),a("pre",{staticClass:"title"},[a("h2",{attrs:{id:"metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metrics"}},[t._v("#")]),t._v(" Metrics "),a("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("Metrics")]),t._v(" (**kwargs: Dict[str, Any])"),t._v("\n")]),t._v("\n")]),t._v(" "),a("p",[t._v("Stores two dictionaries of identical metrics, one for training and one for validation.")]),t._v(" "),a("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),a("dl",[a("dt",[a("strong",[a("code",[t._v("**kwargs")])])]),t._v(" "),a("dd",[t._v("The key defines the name of the metric, the value must be a dictionary that can be used to instantiate a\nchild class of "),a("code",[t._v("allennlp.training.metrics.Metric")]),t._v(" via its "),a("code",[t._v("from_params")]),t._v(" method.")])]),t._v(" "),a("h2",{attrs:{id:"examples"}},[t._v("Examples")]),t._v(" "),a("pre",[a("code",{staticClass:"language-python"},[t._v('>>> from allennlp.training.metrics import Metric\n>>> metrics = Metrics(accuracy={"type": "categorical_accuracy"}, f1={"type": "fbeta"})\n>>> for metric in metrics.get_dict(is_train=False).values():\n...     assert isinstance(metric, Metric)\n')])]),t._v(" "),a("dl",[a("pre",{staticClass:"title"},[a("h3",{attrs:{id:"get-dict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-dict"}},[t._v("#")]),t._v(" get_dict "),a("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),a("dt",[a("div",{staticClass:"language-python extra-class"},[a("pre",{staticClass:"language-python"},[a("code",[t._v("\n"),a("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),a("span",{staticClass:"ident"},[t._v("get_dict")]),t._v(" ("),t._v("\n  self,\n  is_train: bool = True,\n)  -> Dict[str, allennlp.training.metrics.metric.Metric]\n")]),t._v("\n")])])]),t._v(" "),a("dd")])])}),[],!1,null,null,null);e.default=i.exports}}]);