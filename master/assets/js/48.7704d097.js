(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{454:function(t,s,e){"use strict";e.r(s);var i=e(26),a=Object(i.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"biome-text-modules-heads-task-prediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-task-prediction"}},[t._v("#")]),t._v(" biome.text.modules.heads.task_prediction "),e("Badge",{attrs:{text:"Module"}})],1),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"attribution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attribution"}},[t._v("#")]),t._v(" Attribution "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("Attribution")]),t._v(" ("),t._v("\n    "),e("span",[t._v("text: str")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("start: int")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("end: int")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("field: str")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("attribution: float")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for an attribution in a prediction.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("text")])])]),t._v(" "),e("dd",[t._v("Text belonging to the attribution")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("start")])])]),t._v(" "),e("dd",[t._v("Start char id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("end")])])]),t._v(" "),e("dd",[t._v("End char id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("field")])])]),t._v(" "),e("dd",[t._v("Field name of the input to which the attribution belongs")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("attribution")])])]),t._v(" "),e("dd",[t._v("Numeric value quantifying the attribution of 'text' to the prediction")])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"token"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" Token "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("Token")]),t._v(" ("),t._v("\n    "),e("span",[t._v("text: str")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("start: int")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("end: int")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("field: str")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for a token in a prediction.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("text")])])]),t._v(" "),e("dd",[t._v("Text of the token")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("start")])])]),t._v(" "),e("dd",[t._v("Start char id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("end")])])]),t._v(" "),e("dd",[t._v("End char id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("field")])])]),t._v(" "),e("dd",[t._v("Field name of the input to which the token belongs")])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"entity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[t._v("#")]),t._v(" Entity "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("Entity")]),t._v(" ("),t._v("\n    "),e("span",[t._v("label: str")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("start_token: int")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("end_token: int")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("start: Union[int, NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("end: Union[int, NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for a NER entity in a prediction.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("label")])])]),t._v(" "),e("dd",[t._v("Label of the entity")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("start_token")])])]),t._v(" "),e("dd",[t._v("Start token id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("end_token")])])]),t._v(" "),e("dd",[t._v("End token id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("start")])])]),t._v(" "),e("dd",[t._v("Start char id")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("end")])])]),t._v(" "),e("dd",[t._v("End char id")])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskprediction"}},[t._v("#")]),t._v(" TaskPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskPrediction")]),t._v(" ()"),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Base class for the TaskOutput classes.")]),t._v(" "),e("p",[t._v("Each head should implement a proper task prediction class that defines its prediction output.\nYou can use the SENTINEL as default value if you want to omit certain fields when converting to a dict.")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"subclasses"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subclasses"}},[t._v("#")]),t._v(" Subclasses")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.DocumentClassificationPrediction",href:"#biome.text.modules.heads.task_prediction.DocumentClassificationPrediction"}},[t._v("DocumentClassificationPrediction")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.LanguageModellingPrediction",href:"#biome.text.modules.heads.task_prediction.LanguageModellingPrediction"}},[t._v("LanguageModellingPrediction")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.RecordClassificationPrediction",href:"#biome.text.modules.heads.task_prediction.RecordClassificationPrediction"}},[t._v("RecordClassificationPrediction")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.RecordPairClassificationPrediction",href:"#biome.text.modules.heads.task_prediction.RecordPairClassificationPrediction"}},[t._v("RecordPairClassificationPrediction")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.RelationClassificationPrediction",href:"#biome.text.modules.heads.task_prediction.RelationClassificationPrediction"}},[t._v("RelationClassificationPrediction")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TextClassificationPrediction",href:"#biome.text.modules.heads.task_prediction.TextClassificationPrediction"}},[t._v("TextClassificationPrediction")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TokenClassificationPrediction",href:"#biome.text.modules.heads.task_prediction.TokenClassificationPrediction"}},[t._v("TokenClassificationPrediction")])])]),t._v(" "),e("dl",[e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"as-dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#as-dict"}},[t._v("#")]),t._v(" as_dict "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("as_dict")]),t._v("("),e("span",[t._v("self) -> Dict")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd")]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"textclassificationprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#textclassificationprediction"}},[t._v("#")]),t._v(" TextClassificationPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TextClassificationPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("labels: List[str]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("probabilities: List[float]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("attributions: Union[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Attribution",href:"#biome.text.modules.heads.task_prediction.Attribution"}},[t._v("Attribution")]),t._v("], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("TextClassification")]),t._v(" head")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("labels")])])]),t._v(" "),e("dd",[t._v("Ordered list of predictions, from the label with the highest to the label with the lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("probabilities")])])]),t._v(" "),e("dd",[t._v("Ordered list of probabilities, from highest to lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("attributions")])])]),t._v(" "),e("dd",[t._v("Attribution of each token to the prediction.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("tokens")])])]),t._v(" "),e("dd",[t._v("Tokens of the tokenized input")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"documentclassificationprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#documentclassificationprediction"}},[t._v("#")]),t._v(" DocumentClassificationPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("DocumentClassificationPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("labels: List[str]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("probabilities: List[float]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("attributions: Union[List[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Attribution",href:"#biome.text.modules.heads.task_prediction.Attribution"}},[t._v("Attribution")]),t._v("]], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("]], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("DocumentClassification")]),t._v(" head")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("labels")])])]),t._v(" "),e("dd",[t._v("Ordered list of predictions, from the label with the highest to the label with the lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("probabilities")])])]),t._v(" "),e("dd",[t._v("Ordered list of probabilities, from highest to lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("attributions")])])]),t._v(" "),e("dd",[t._v("Attribution of each token to the prediction.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("tokens")])])]),t._v(" "),e("dd",[t._v("Tokens of the tokenized input")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-2"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"recordclassificationprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recordclassificationprediction"}},[t._v("#")]),t._v(" RecordClassificationPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("RecordClassificationPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("labels: List[str]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("probabilities: List[float]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("attributions: Union[List[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Attribution",href:"#biome.text.modules.heads.task_prediction.Attribution"}},[t._v("Attribution")]),t._v("]], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("]], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("RecordClassification")]),t._v(" head")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("labels")])])]),t._v(" "),e("dd",[t._v("Ordered list of predictions, from the label with the highest to the label with the lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("probabilities")])])]),t._v(" "),e("dd",[t._v("Ordered list of probabilities, from highest to lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("attributions")])])]),t._v(" "),e("dd",[t._v("Attribution of each token to the prediction.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("tokens")])])]),t._v(" "),e("dd",[t._v("Tokens of the tokenized input")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-3"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"recordpairclassificationprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recordpairclassificationprediction"}},[t._v("#")]),t._v(" RecordPairClassificationPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("RecordPairClassificationPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("labels: List[str]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("probabilities: List[float]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("attributions: Union[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Attribution",href:"#biome.text.modules.heads.task_prediction.Attribution"}},[t._v("Attribution")]),t._v("], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("]], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("RecordPairClassification")]),t._v(" head")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("labels")])])]),t._v(" "),e("dd",[t._v("Ordered list of predictions, from the label with the highest to the label with the lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("probabilities")])])]),t._v(" "),e("dd",[t._v("Ordered list of probabilities, from highest to lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("attributions")])])]),t._v(" "),e("dd",[t._v("Attribution of each record field to the prediction. The calculated attributions only make sense\nfor a duplicate/not_duplicate binary classification task of the two records.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("tokens")])])]),t._v(" "),e("dd",[t._v("Tokens of the tokenized input")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-4"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"relationclassificationprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#relationclassificationprediction"}},[t._v("#")]),t._v(" RelationClassificationPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("RelationClassificationPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("labels: List[str]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("probabilities: List[float]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("RelationClassification")]),t._v(" head")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("labels")])])]),t._v(" "),e("dd",[t._v("Ordered list of predictions, from the label with the highest to the label with the lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("probabilities")])])]),t._v(" "),e("dd",[t._v("Ordered list of probabilities, from highest to lowest probability.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("tokens")])])]),t._v(" "),e("dd",[t._v("Tokens of the tokenized input")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-5"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"tokenclassificationprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tokenclassificationprediction"}},[t._v("#")]),t._v(" TokenClassificationPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TokenClassificationPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("tags: List[List[str]]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("entities: List[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Entity",href:"#biome.text.modules.heads.task_prediction.Entity"}},[t._v("Entity")]),t._v("]]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("scores: List[float]")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("TokenClassification")]),t._v(" head")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("tags")])])]),t._v(" "),e("dd",[t._v("List of lists of NER tags, ordered by score.\nThe list of NER tags with the highest score comes first.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("entities")])])]),t._v(" "),e("dd",[t._v("List of list of entities, ordered by score.\nThe list of entities with the highest score comes first.")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("scores")])])]),t._v(" "),e("dd",[t._v("Ordered list of scores for each list of NER tags (highest to lowest).")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("tokens")])])]),t._v(" "),e("dd",[t._v("Tokens of the tokenized input.")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-6"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"languagemodellingprediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#languagemodellingprediction"}},[t._v("#")]),t._v(" LanguageModellingPrediction "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("LanguageModellingPrediction")]),t._v(" ("),t._v("\n    "),e("span",[t._v("lm_embeddings: "),e("built-in",{attrs:{function:"",array:""}})],1),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("mask: "),e("built-in",{attrs:{function:"",array:""}})],1),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("loss: Union[float, NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("tokens: Union[List["),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.Token",href:"#biome.text.modules.heads.task_prediction.Token"}},[t._v("Token")]),t._v("], NoneType] = 'SENTINEL TO SKIP DATACLASS FIELDS WHEN CONVERTING TO DICT'")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Output dataclass for the "),e("code",[t._v("LanguageModelling")]),t._v(" head")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-7"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);