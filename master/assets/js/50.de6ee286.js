(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{455:function(t,a,e){"use strict";e.r(a);var s=e(26),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"biome-text-modules-heads-task-head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-task-head"}},[t._v("#")]),t._v(" biome.text.modules.heads.task_head "),e("Badge",{attrs:{text:"Module"}})],1),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskname"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskname"}},[t._v("#")]),t._v(" TaskName "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskName")]),t._v(" ("),t._v("\n    "),e("span",[t._v("value")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("names=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("*")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("module=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("qualname=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("type=None")]),e("span",[t._v(",")]),t._v("\n    "),e("span",[t._v("start=1")]),e("span",[t._v(",")]),t._v("\n"),e("span",[t._v(")")]),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("The task name enum structure")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[t._v("enum.Enum")])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskhead"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskhead"}},[t._v("#")]),t._v(" TaskHead "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskHead")]),t._v(" (backbone: "),e("a",{attrs:{title:"biome.text.backbone.ModelBackbone",href:"../../backbone.html#biome.text.backbone.ModelBackbone"}},[t._v("ModelBackbone")]),t._v(")"),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Base task head class")]),t._v(" "),e("p",[t._v("Initializes internal Module state, shared by both nn.Module and ScriptModule.")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-2"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[t._v("torch.nn.modules.module.Module")]),t._v(" "),e("li",[t._v("allennlp.common.registrable.Registrable")]),t._v(" "),e("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"subclasses"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#subclasses"}},[t._v("#")]),t._v(" Subclasses")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.heads.classification.classification.ClassificationHead",href:"classification/classification.html#biome.text.modules.heads.classification.classification.ClassificationHead"}},[t._v("ClassificationHead")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.language_modelling.LanguageModelling",href:"language_modelling.html#biome.text.modules.heads.language_modelling.LanguageModelling"}},[t._v("LanguageModelling")])]),t._v(" "),e("li",[e("a",{attrs:{title:"biome.text.modules.heads.token_classification.TokenClassification",href:"token_classification.html#biome.text.modules.heads.token_classification.TokenClassification"}},[t._v("TokenClassification")])])]),t._v(" "),e("dl",[e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"register"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#register"}},[t._v("#")]),t._v(" register "),e("Badge",{attrs:{text:"Static method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("register")]),t._v(" ("),t._v("\n  overrides: bool = False,\n  **kwargs,\n) \n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Enables the task head component for pipeline loading")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"instance-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables"}},[t._v("#")]),t._v(" Instance variables")]),t._v("\n")]),t._v(" "),e("dl",[e("dt",{attrs:{id:"biome.text.modules.heads.task_head.TaskHead.labels"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("labels")]),t._v(" : List[str]")])]),t._v(" "),e("dd",[e("p",[t._v("The configured vocab labels")])]),t._v(" "),e("dt",{attrs:{id:"biome.text.modules.heads.task_head.TaskHead.num_labels"}},[e("code",{staticClass:"name"},[t._v("var "),e("span",{staticClass:"ident"},[t._v("num_labels")])])]),t._v(" "),e("dd",[e("p",[t._v("The number of vocab labels")])])]),t._v(" "),e("dl",[e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"on-vocab-update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#on-vocab-update"}},[t._v("#")]),t._v(" on_vocab_update "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("on_vocab_update")]),t._v("("),e("span",[t._v("self)")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Actions when vocab is updated. Rebuild here modules that initialization depends on some vocab metric")]),t._v(" "),e("p",[t._v("At this point, the model.vocab is already updated, so it could be used for architecture update")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"extend-labels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extend-labels"}},[t._v("#")]),t._v(" extend_labels "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("extend_labels")]),t._v(" ("),t._v("\n  self,\n  labels: List[str],\n) \n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Extends the number of labels")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"inputs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[t._v("#")]),t._v(" inputs "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("inputs")]),t._v("("),e("span",[t._v("self) -> Union[List[str], NoneType]")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("The expected inputs names for data featuring. If no defined,\nwill be automatically calculated from featurize signature")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"forward"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forward"}},[t._v("#")]),t._v(" forward "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("forward")]),t._v(" ("),t._v("\n  self,\n  *args: Any,\n  **kwargs: Any,\n)  -> Dict[str, Any]\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("The head's forward pass, it must include the backbone's "),e("code",[t._v("forward")]),t._v(".")]),t._v(" "),e("p",[t._v("When trained, the returned dict has to have a 'loss' key pointing to a\nscalar "),e("code",[t._v("torch.Tensor")]),t._v(" representing the loss to be optimized.\nWhen used for inference, it has to include everything to make the TaskOutput -> "),e("code",[t._v("self.make_task_output")]),t._v(".")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"get-metrics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-metrics"}},[t._v("#")]),t._v(" get_metrics "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("get_metrics")]),t._v(" ("),t._v("\n  self,\n  reset: bool = False,\n)  -> Dict[str, float]\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Metrics dictionary for training task")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"featurize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#featurize"}},[t._v("#")]),t._v(" featurize "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("featurize")]),t._v(" ("),t._v("\n  self,\n  *args,\n  **kwargs,\n)  -> allennlp.data.instance.Instance\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Converts incoming data into an Allennlp "),e("code",[t._v("Instance")]),t._v(", used for pyTorch tensors generation")]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("instance")])]),t._v(" "),e("dd",[t._v(" ")])]),t._v(" "),e("h2",{attrs:{id:"raises"}},[t._v("Raises")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("FeaturizeError")])]),t._v(" "),e("dd",[t._v(" ")])])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"make-task-prediction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#make-task-prediction"}},[t._v("#")]),t._v(" make_task_prediction "),e("Badge",{attrs:{text:"Method"}})],1),t._v("\n")]),t._v(" "),e("dt",[e("div",{staticClass:"language-python extra-class"},[e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("def")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("make_task_prediction")]),t._v(" ("),t._v("\n  self,\n  single_forward_output: Dict[str, numpy.ndarray],\n  instance: allennlp.data.instance.Instance,\n  prediction_config: PredictionConfiguration,\n)  -> "),e("a",{attrs:{title:"biome.text.modules.heads.task_prediction.TaskPrediction",href:"task_prediction.html#biome.text.modules.heads.task_prediction.TaskPrediction"}},[t._v("TaskPrediction")]),t._v("\n")]),t._v("\n")])])]),t._v(" "),e("dd",[e("p",[t._v("Transforms the forward output to a task output, only used for predictions.")]),t._v(" "),e("h2",{attrs:{id:"parameters"}},[t._v("Parameters")]),t._v(" "),e("dl",[e("dt",[e("strong",[e("code",[t._v("single_forward_output")])])]),t._v(" "),e("dd",[t._v("A single (not batched) output from the head's forward method")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("instance")])])]),t._v(" "),e("dd",[t._v("The instance underlying the prediction")]),t._v(" "),e("dt",[e("strong",[e("code",[t._v("prediction_config")])])]),t._v(" "),e("dd",[t._v("Configurations for the prediction")])]),t._v(" "),e("h2",{attrs:{id:"returns"}},[t._v("Returns")]),t._v(" "),e("dl",[e("dt",[e("code",[t._v("task_prediction")])]),t._v(" "),e("dd",[t._v("A task specific output for the prediction")])])])]),t._v(" "),e("div"),t._v(" "),e("pre",{staticClass:"title"},[e("h2",{attrs:{id:"taskheadconfiguration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#taskheadconfiguration"}},[t._v("#")]),t._v(" TaskHeadConfiguration "),e("Badge",{attrs:{text:"Class"}})],1),t._v("\n")]),t._v(" "),e("pre",{staticClass:"language-python"},[e("code",[t._v("\n"),e("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),e("span",{staticClass:"ident"},[t._v("TaskHeadConfiguration")]),t._v(" (*args, **kwds)"),t._v("\n")]),t._v("\n")]),t._v(" "),e("p",[t._v("Layer spec for TaskHead components")]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"ancestors-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestors-3"}},[t._v("#")]),t._v(" Ancestors")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration"}},[t._v("ComponentConfiguration")])]),t._v(" "),e("li",[t._v("typing.Generic")]),t._v(" "),e("li",[t._v("allennlp.common.from_params.FromParams")])]),t._v(" "),e("pre",{staticClass:"title"},[e("h3",{attrs:{id:"inherited-members"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members"}},[t._v("#")]),t._v(" Inherited members")]),t._v("\n")]),t._v(" "),e("ul",{staticClass:"hlist"},[e("li",[e("code",[e("b",[e("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration"}},[t._v("ComponentConfiguration")])])]),t._v(":\n"),e("ul",{staticClass:"hlist"},[e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.compile",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.compile"}},[t._v("compile")])])]),t._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.config",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.config"}},[t._v("config")])])]),t._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.from_params",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.from_params"}},[t._v("from_params")])])]),t._v(" "),e("li",[e("code",[e("a",{attrs:{title:"biome.text.modules.configuration.defs.ComponentConfiguration.input_dim",href:"../configuration/defs.html#biome.text.modules.configuration.defs.ComponentConfiguration.input_dim"}},[t._v("input_dim")])])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);