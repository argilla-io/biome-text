(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{448:function(a,e,t){"use strict";t.r(e);var s=t(26),i=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"biome-text-modules-heads-classification-classification"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#biome-text-modules-heads-classification-classification"}},[a._v("#")]),a._v(" biome.text.modules.heads.classification.classification "),t("Badge",{attrs:{text:"Module"}})],1),a._v(" "),t("div"),a._v(" "),t("div"),a._v(" "),t("pre",{staticClass:"title"},[t("h2",{attrs:{id:"classificationhead"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classificationhead"}},[a._v("#")]),a._v(" ClassificationHead "),t("Badge",{attrs:{text:"Class"}})],1),a._v("\n")]),a._v(" "),t("pre",{staticClass:"language-python"},[t("code",[a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("class")]),a._v(" "),t("span",{staticClass:"ident"},[a._v("ClassificationHead")]),a._v(" ("),a._v("\n    "),t("span",[a._v("backbone: "),t("a",{attrs:{title:"biome.text.backbone.ModelBackbone",href:"../../../backbone.html#biome.text.backbone.ModelBackbone"}},[a._v("ModelBackbone")])]),t("span",[a._v(",")]),a._v("\n    "),t("span",[a._v("labels: List[str]")]),t("span",[a._v(",")]),a._v("\n    "),t("span",[a._v("multilabel: bool = False")]),t("span",[a._v(",")]),a._v("\n    "),t("span",[a._v("label_weights: Union[List[float], Dict[str, float], NoneType] = None")]),t("span",[a._v(",")]),a._v("\n"),t("span",[a._v(")")]),a._v("\n")]),a._v("\n")]),a._v(" "),t("p",[a._v("Base abstract class for classification problems")]),a._v(" "),t("h2",{attrs:{id:"parameters"}},[a._v("Parameters")]),a._v(" "),t("dl",[t("dt",[t("strong",[t("code",[a._v("labels")])])]),a._v(" "),t("dd",[a._v("A list of labels for your classification task")]),a._v(" "),t("dt",[t("strong",[t("code",[a._v("multilabel")])])]),a._v(" "),t("dd",[a._v("Is this a multi label classification task? Default: False")]),a._v(" "),t("dt",[t("strong",[t("code",[a._v("label_weights")])])]),a._v(" "),t("dd",[a._v("A list of weights for each label. The weights must be in the same order as the "),t("code",[a._v("labels")]),a._v(".\nYou can also provide a dictionary that maps the label to its weight. Default: None.")])]),a._v(" "),t("p",[a._v("Initializes internal Module state, shared by both nn.Module and ScriptModule.")]),a._v(" "),t("pre",{staticClass:"title"},[t("h3",{attrs:{id:"ancestors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ancestors"}},[a._v("#")]),a._v(" Ancestors")]),a._v("\n")]),a._v(" "),t("ul",{staticClass:"hlist"},[t("li",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead"}},[a._v("TaskHead")])]),a._v(" "),t("li",[a._v("torch.nn.modules.module.Module")]),a._v(" "),t("li",[a._v("allennlp.common.registrable.Registrable")]),a._v(" "),t("li",[a._v("allennlp.common.from_params.FromParams")])]),a._v(" "),t("pre",{staticClass:"title"},[t("h3",{attrs:{id:"subclasses"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subclasses"}},[a._v("#")]),a._v(" Subclasses")]),a._v("\n")]),a._v(" "),t("ul",{staticClass:"hlist"},[t("li",[t("a",{attrs:{title:"biome.text.modules.heads.classification.doc_classification.DocumentClassification",href:"doc_classification.html#biome.text.modules.heads.classification.doc_classification.DocumentClassification"}},[a._v("DocumentClassification")])]),a._v(" "),t("li",[t("a",{attrs:{title:"biome.text.modules.heads.classification.record_pair_classification.RecordPairClassification",href:"record_pair_classification.html#biome.text.modules.heads.classification.record_pair_classification.RecordPairClassification"}},[a._v("RecordPairClassification")])]),a._v(" "),t("li",[t("a",{attrs:{title:"biome.text.modules.heads.classification.relation_classification.RelationClassification",href:"relation_classification.html#biome.text.modules.heads.classification.relation_classification.RelationClassification"}},[a._v("RelationClassification")])]),a._v(" "),t("li",[t("a",{attrs:{title:"biome.text.modules.heads.classification.text_classification.TextClassification",href:"text_classification.html#biome.text.modules.heads.classification.text_classification.TextClassification"}},[a._v("TextClassification")])])]),a._v(" "),t("dl",[t("pre",{staticClass:"title"},[t("h3",{attrs:{id:"get-metrics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-metrics"}},[a._v("#")]),a._v(" get_metrics "),t("Badge",{attrs:{text:"Method"}})],1),a._v("\n")]),a._v(" "),t("dt",[t("div",{staticClass:"language-python extra-class"},[t("pre",{staticClass:"language-python"},[t("code",[a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("def")]),a._v(" "),t("span",{staticClass:"ident"},[a._v("get_metrics")]),a._v(" ("),a._v("\n  self,\n  reset: bool = False,\n)  -> Dict[str, float]\n")]),a._v("\n")])])]),a._v(" "),t("dd",[t("p",[a._v("Get the metrics of our classifier, see :func:"),t("code",[a._v("~allennlp_2.models.Model.get_metrics")]),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"parameters"}},[a._v("Parameters")]),a._v(" "),t("dl",[t("dt",[t("strong",[t("code",[a._v("reset")])])]),a._v(" "),t("dd",[a._v("Reset the metrics after obtaining them?")])]),a._v(" "),t("h2",{attrs:{id:"returns"}},[a._v("Returns")]),a._v(" "),t("p",[a._v("A dictionary with all metric names and values.")])])]),a._v(" "),t("pre",{staticClass:"title"},[t("h3",{attrs:{id:"inherited-members"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inherited-members"}},[a._v("#")]),a._v(" Inherited members")]),a._v("\n")]),a._v(" "),t("ul",{staticClass:"hlist"},[t("li",[t("code",[t("b",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead"}},[a._v("TaskHead")])])]),a._v(":\n"),t("ul",{staticClass:"hlist"},[t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.extend_labels",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.extend_labels"}},[a._v("extend_labels")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.featurize",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.featurize"}},[a._v("featurize")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.forward",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.forward"}},[a._v("forward")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.inputs",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.inputs"}},[a._v("inputs")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.labels",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.labels"}},[a._v("labels")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.make_task_prediction",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.make_task_prediction"}},[a._v("make_task_prediction")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.num_labels",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.num_labels"}},[a._v("num_labels")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.on_vocab_update",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.on_vocab_update"}},[a._v("on_vocab_update")])])]),a._v(" "),t("li",[t("code",[t("a",{attrs:{title:"biome.text.modules.heads.task_head.TaskHead.register",href:"../task_head.html#biome.text.modules.heads.task_head.TaskHead.register"}},[a._v("register")])])])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);